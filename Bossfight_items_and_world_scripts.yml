# Boss Fight - Multistage and Highly Configurable
 # <snip> 
 #======================================================================================================
 # This script is now just the loot items - that only need to be defined once per server, not for each boss (if you have more than one).
 # 
 # To get one of these items without fighting the boss, as op, simply substitute the name of the item and type the following into your Minecraft chat:
 #
 #   /ex drop "item:Hammer of the Gods" "location:<player.location>"
 #
 #================================================================================================
"Bossfight Determine Loot":
#-------------------------------------------------------------------------------
# This section is a PROCEDURE script used to return a SINGLE value back to our main script. In this case, we just want an ITEM SCRIPT name to be returned.
#
# The script "rolls" a value between 0 to a 100 for each player. If it rolls between 0 to 40, set the quality to "Common". If its anywhere between
# 40 to 70, set it to "Uncommon" etc etc.
#
# Then, after the quality has been defined, check which section we'll be getting the item from. So, if the %quality% is "Common", it'll go into the
# corresponding braces and run the first command "random 8", which will then jump to any one of the following 8 lines.
#
# If it then lands on "Durable Diamond Helmet", that's the value the procedure script will return to the main boss script and that's the item that will
# dropped/given to the player.
#-------------------------------------------------------------------------------
    type: procedure
    debug: false
    script:
    - define roll <util.random.int[1].to[100]>
    - if %roll% >= 0 && %roll% < 40 define quality "Common"
      else if %roll% >= 40 && %roll% < 70 define quality "Uncommon"
      else if %roll% >= 70 && %roll% < 85 define quality "Rare"
      else if %roll% >= 85 && %roll% < 95 define quality "Epic"
      else if %roll% >= 95 define quality "Legendary"

    - if %quality% == Common {
      - random {
        - determine "Trusty Diamond Axe"
        - determine "Trusty Diamond Sword"
        - determine "Durable Diamond Helmet"
        - determine "Thorny Diamond Chestplate"
        - determine "Diamond Sword of Looting" } }
    #  - determine "Efficient Diamond Pickaxe" # these three commented out, as no mining/building allowed in our quest world
    #  - determine "Trusty Diamond Hoe"
    #  - determine "Trusty Diamond Spade"

      else if %quality% == Uncommon {
        - random {
          - determine "Herder"
          - determine "MerryGoRound"
          - determine "FoolsGold"
          - determine "PTD" } }
      #  - determine "Doppelganger"  # commented out, as glitchy with current server version (spigot 1.7.10 + 1.8 protocol hacks)

      else if %quality% == Rare {
        - random {
          - determine "Aquamarine"
          - determine "Karthlan Warrior Axe"
          - determine "Flamebane"
          - determine "PhaseShifter" } }
      
      else if %quality% == Epic 
        - random {
          - determine "Meteorite"
          - determine "Sunflare"
          - determine "Heartburn" } }
      
      else if %quality% == Legendary 
        - random {
          - determine "Bow of Decay"
          - determine "Hammer of the Gods"
          - determine "Lifestealer"
          - determine "Bloodsucker"
          - determine "Mobcorn" } }
          
 #=================================================================================================================================
  # The next section of the script defines the items, their lore and Minecraft enchantments. To replace/add enchantments check out the following link:
  #
  #   http://jd.bukkit.org/rb/apidocs/org/bukkit/enchantments/Enchantment.html

#--------------------------------- Common Items --------------------------------------------------------------------------------
"Trusty Diamond Axe":
   type: item
   material: diamond_axe
   no_id: true
   display name: "Trusty Diamond Axe"
   lore:
   - A trusty diamond axe.
   - Common Item
   enchantments:
   - durability:1
   - damage_all:1

"Trusty Diamond Sword":
   type: item
   material: diamond_sword
   no_id: true
   display name: "Trusty Diamond Sword"
   lore:
   - A trusty diamond sword.
   - Common Item
   enchantments:
   - durability:1
   - damage_all:1

"Trusty Diamond Hoe":
   type: item
   material: diamond_hoe
   no_id: true
   display name: "Trusty Diamond Hoe"
   lore:
   - A trusty diamond hoe.
   - Common Item
   enchantments:
   - durability:1

"Trusty Diamond Spade":
   type: item
   material: diamond_spade
   no_id: true
   display name: "Trusty Diamond Spade"
   lore:
   - A trusty diamond spade.
   - Common Item
   enchantments:
   - durability:1

"Durable Diamond Helmet":
   type: item
   material: diamond_helmet
   no_id: true
   display name: "Durable Diamond Helmet"
   lore:
   - A durable diamond helmet.
   - Common Item
   enchantments:
   - durability:1

"Thorny Diamond Chestplate":
   type: item
   material: diamond_chestplate
   no_id: true
   display name: "Thorny Diamond Chestplate"
   lore:
   - A thorny diamond chestplate.
   - Common Item
   enchantments:
   - durability:2
   - thorns:1

"Diamond Sword of Looting":
   type: item
   material: diamond_sword
   no_id: true
   display name: "Diamond Sword of Looting"
   lore:
   - Increased loot drops with this diamond
   - sword.
   - Common Item
   enchantments:
   - loot_bonus_mobs:1
   - durability:2

"Efficient Diamond Pickaxe":
   type: item
   material: diamond_pickaxe
   no_id: true
   display name: "Efficient Diamond Pickaxe"
   lore:
   - A fast and durable pickaxe.
   enchantments:
   - durability:2
   - dig_speed:5

#-------------------------------- Uncommon Items -------------------------------#
"MerryGoRound":
   type: item
   material: bow
   display name: "MerryGoRound"
   lore:
   - A twisted circus owner forged this to
   - use on his 'less willing' performers.
   - Uncommon Item
   enchantments:
   - durability:3

"PhaseShifter":
   type: item
   material: diamond_sword
   display name: "PhaseShifter"
   lore:
   - Now you see me.. now you don't.
   - Uncommon Item
   enchantments:
   - durability:3

"Herder":
   type: item
   material: diamond_hoe
   display name: "Herder"
   lore:
   - Capture up to 3 friendly mobs inside
   - this magical hoe.
   - Uncommon Item
   enchantments:
   - durability:3

"FoolsGold":
   type: item
   material: gold_nugget
   display name: "Fool's Gold"
   lore:
   - Lure your victims with Fool's Gold
   - and strike them from behind!
   - Uncommon Item

"Doppelganger":
   type: item
   material: feather
   display name: "Doppelganger"
   lore:
   - Doppelganger is a paranormal double
   - of a living enity.
   - Uncommon Item

"PTD":
   type: item
   material: diamond_sword
   display name: "PTD"
   lore:
   - Personal Teleportation Device v0.3
   - Uncommon Item

#--------------------------------- Rare Items --------------------------------#
"Flamebane":
   type: item
   material: diamond_chestplate
   no_id: true
   display name: "Flamebane"
   lore:
   - Forged in the fires of Mount Regaros
   - for workers to survive extreme mining
   - conditions.
   - Rare Item
   enchantments:
   - protection_explosions:4
   - protection_fire:4
   - protection_environmental:4

"Aquamarine":
   type: item
   material: diamond_helmet
   no_id: true
   display name: "Aquamarine"
   lore:
   - Created by the Great Engineers of Karthlan
   - to allow working and mining underwater.
   - Rare Item
   enchantments:
   - water_worker:1
   - oxygen:3
   - durability:3

"Karthlan Warrior Axe":
   type: item
   material: diamond_axe
   no_id: true
   display name: "Karthlan Warrior Axe"
   lore:
   - A super durable 2000 year old axe from the
   - destroyed Karthlan dynasty.
   - Rare Item
   enchantments:
   - knockback:2
   - damage_all:5
   - durability:3

#--------------------------------- Epic Items --------------------------------#
"Meteorite":
   type: item
   material: stick
   display name: "Meteorite"
   lore:
   - Same as dodgeball, but with flaming
   - hot, explosive magma.
   - Epic Item
   enchantments:
   - durability:3

"Sunflare":
   type: item
   material: diamond_sword
   no_id: true
   display name: "Sunflare"
   lore:
   - A forgotten elementalist imbued this sword with
   - the power of the sun to set its victims on fire.
   - Epic Item
   enchantments:
   - fire_espect:2
   - damage_all:5
   - durability:3

"Heartburn":
   type: item
   material: bow
   no_id: true
   display name: "Heartburn"
   lore:
   - Coated arrow tips set alight even
   - with the slightest wind friction.
   - Epic Item
   enchantments:
   - arrow_fire:2
   - damage_all:5
   - durability:3

#----------------------------- Legendary Items -----------------------------#
"Bow of Decay":
   type: item
   material: bow
   display name: "Bow of Decay"
   lore:
   - A legion of tormented souls imprisoned in this bow fills 
   - each arrow with a millenia of despair and insanity.
   - Legendary Item
   enchantments:
   - durability:3

"Hammer of the Gods":
   type: item
   material: diamond_axe
   display name: "Hammer of the Gods"
   lore:
   - Long lost where even the gods couldn't find it, yet this
   - hammer mysteriously ended up in your hands.
   - Legendary Item
   enchantments:
   - durability:3
   - damage_all:3

"Lifestealer":
   type: item
   material: diamond_sword
   display name: "Lifestealer"
   lore:
   - A sacrifice gone wrong, the sword was removed from 
   - the hands of a baby, dressed in necromancer robes.
   - Legendary Item
   enchantments:
   - durability:3
   - damage_all:3

"Mobcorn":
   type: item
   material: stick
   display name: "Mobcorn"
   lore:
   - What happens when you put a magnetron inside
   - a cow? Only one way to find out.
   - Legendary Item

"Mobcorn Time":
# This script is called by an "on event" in a world script further down.
    type: task
    debug: false
    script:
    - narrate "<white><%1%.entity_type><red> is going to explode in..." targets:<player.location.find.players.within[20]>
    - if <%1%.is_spawned> { 
      - narrate "<red>3...." targets:<player.location.find.players.within[20]>
      - playsound location:<%1%.location> sound:fuse
      - playeffect location:<%1%.location> effect:fireworks_spark qty:5 }
      else {
        - queue clear 
        - flag player "Mobcorn_Cooldown:!" }
    - wait 1t
    - if <%1%.is_spawned> { 
      - narrate "<red>2...." targets:<player.location.find.players.within[20]>
      - playeffect location:<%1%.location> effect:fireworks_spark qty:10 }
      else {
        - queue clear 
        - flag player "Mobcorn_Cooldown:!" }
    - wait 1 
    - if <%1%.is_spawned> { 
      - narrate "<red>1...." targets:<player.location.find.players.within[20]>
      - playeffect location:<%1%.location> effect:fireworks_spark qty:20 }
      else {
        - queue clear 
        - flag player "Mobcorn_Cooldown:!" }
    - wait 1
    - if <%1%.is_spawned> {
      - explode power:5 location:<%1%.location>
      - if <%1%.is_spawned> remove %1% }
      else {
        - queue clear
        - flag player "Mobcorn_Cooldown:!" }


 #------------------- Bloodsucker Legendary Item Section -------------------#
  # This item requires its own section because it does a little more than
  # the other items. Below is a script similar to the minion script
  # but a lot simpler.
  #
  # The primary points here are:
  # 1) Create the bats
  # 2) Add bats to player flag and remove them permanently on death
  # 3) Remove bats if their owner or their target exits their proximity.
  # 4) Remove the bat after 60 seconds regardless of what it's doing.
  #
  # Further down there are a couple of world events to remove the bats when
  # the player dies or quits the server.
  #------------------- Bloodsucker Legendary Item Section -------------------#

"Bloodsucker":
   type: item
   material: diamond_sword
   display name: "Bloodsucker"
   lore:
   - Those squeaky noises, glowing red eyes..
   - .... I hope my end is quick.
   - Legendary Item
   enchantments:
   - durability:3

"Spawn Bloodsucker Bat":
    type: task
    debug: false
    script:
    - playeffect location:%1% effect:LARGE_SMOKE
    - execute as_server "npc create Bloodsucker --at %1% --type bat --speed 1.5" silent
    - execute as_server "npc owner %2%" silent
    - execute as_server 'npc assign --set "Bloodsucker Bat"' silent

"Bloodsucker Bat":
  type: assignment
  debug: false
  actions:
    on assignment:
    - flag <npc.owner> bsBatList:->:<npc>
    - trigger name:proximity toggle:true radius:15
    - trigger name:damage toggle:true
    - execute as_server "npc sel <npc.id>" silent
    - execute as_server "npc name" silent
    - execute as_server "npc vulnerable" silent
    - execute as_server "npc health --set 5" silent
    - run "Bloodsucker Despawn Timer" delay:60s
    
    on death:
    - determine passively cancelled
    - flag <npc.owner> bsBatList:<-:<npc>
    - remove <npc>

    on damage:
    - playsound location:<npc.location> sound:bat_idle
    
    on exit proximity:
    - ^if <npc.owner.flag[bsTarget]> == <player> || <player> == <npc.owner> {
      - flag <npc.owner> bsBatList:<-:<npc>
      - remove <npc> }

"Bloodsucker Despawn Timer":
    type: task
    debug: false
    script:
    - define npc <npc||null>
    - if <util.npc_is_valid[%npc%]> {
      - flag <npc.owner> bsBatList:<-:<npc>
      - remove <npc> }

#-------------------------------------------------------------------------------
# The section below handles the world events to make all the "cool stuff" possible. It means that every time one of these events occur
# in the world, it will be evaluated against some criteria to see if the "cool stuff" should happen.
#
# For example, every time any entity (<context.entity>) in the world is damaged by an arrow, it checks to see if the person (<context.damager>)
# that fired the arrow is holding an item created by one of the scripts above.
#
# If they are and there are no cooldowns in effect, it'll run the relevant (cast or rotate) commands on the entity that got hit.
#-------------------------------------------------------------------------------
"Legendary and Epic Item Effects":   
  type: world
  debug: false
  events:
  
    # Mobcorn - script performs checks and then calls task script "mobcorn time"
    on player right clicks entity with i@Mobcorn:
    - ^if !<context.entity.is_mob> && <global.flag[AllMinions].as_list||li@> !contains <context.entity> {
      - narrate "<red>You can only use Mobcorn on Mobs!"
      - queue clear }
    - ^if <global.flag[ListOfBosses].as_list||li@> contains <context.entity> {
      - narrate "<red>You can't use Mobcorn on Bosses!"
      - queue clear }
    - ^if !<player.has_flag[Mobcorn_Cooldown]> {
      - flag <player> "Mobcorn_Cooldown" duration:30s
      - run "Mobcorn Time" def:<context.entity> 
      - queue clear }
    - ^narrate "<white><player.flag[Mobcorn_Cooldown].expiration.formatted><red> before you can use <white>Mobcorn<red> again."  
       
    # Herder - captures mobs, for release later on. NB does not save detail of mob, only type.
    on player right clicks entity with i@Herder:
    - if <player.flag[HerderList].size||0> >= 3 narrate "<red>The <white>Herder<red> is full and cannot capture any more souls..."
      else if <context.entity.is_mob> {
        - flag <player> HerderList:->:<context.entity.entity_type>
        - playeffect location:<context.entity.location> effect:witch_magic
        - remove <context.entity>
        - if <player.flag[HerderList].size> == 1 narrate "<red>You have trapped the soul of a <player.flag[HerderList].formatted>..."
          else if <player.flag[HerderList].size> >= 2 narrate "<red>You have trapped the souls of <player.flag[HerderList].formatted>.." }

    on player right clicks block with i@Herder:
    - if <player.has_flag[HerderList]> {
      - narrate "<red>Releasing <player.flag[HerderList].formatted>..."
      - define location <location.cursor_on.simple>
      - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,2,2]>].as_cuboid>
      - foreach <player.flag[HerderList].as_list> {
        - spawn %value% location:<%cuboid%.get_spawnable_blocks.random> }
      - flag <player> "HerderList:!" }
      
    # This script will teleport any player, where no cooldown is in effect, to a "safe" location within a 20 block radius. Above or below ground.
    # WARNING: This will allow players to get into protected buildings!!
    on player right clicks with i@PhaseShifter:
    - if !<player.has_flag[PhaseShifter_Cooldown]> {
      - flag <player> "PhaseShifter_Cooldown" duration:3s
      - if !<player.has_flag[PhaseShifter_Narrate_Cooldown]> {
        - random {
          - narrate "<white><player.name.display><red> shimmers and disappears..." targets:<player.location.find.players.within[10]>
          - narrate "<white><player.name.display><red> teleports to a nearby location..." targets:<player.location.find.players.within[10]>
          - narrate "<white>With a puff of smoke, <white><player.name.display><red> teleports not too far away.." targets:<player.location.find.players.within[10]> }
        }
      - flag <player> "PhaseShifter_Narrate_Cooldown" duration:20s
      - playsound location:<player.location> sound:enderman_teleport
      - playeffect location:<player.location> effect:large_smoke
      - define location <player.location.simple>
      - define cuboid <el@val[<l@%location%.add[l@-20,-10,-20]>|<l@%location%.add[l@20,20,20]>].as_cuboid>
      - teleport <player> location:<%cuboid%.get_spawnable_blocks.random>
      - playsound location:<player.location> sound:enderman_teleport
      - playeffect location:<player.location> effect:large_smoke }
    
    # Foolsgold - modified from original (which displayed blocks) as mining is not enabled in our quest world.
    on player right clicks block with i@FoolsGold:
    - if !<player.has_flag[Fools_Gold_Cooldown]> {
      - flag player "Fools_Gold_Cooldown" duration:60s
      - define location <player.location.cursor_on.simple>
      - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,2,2]>].as_cuboid>
      - displayitem i@emerald location:<%cuboid%.get_spawnable_blocks.random> duration:60s
      - displayitem i@emerald location:<%cuboid%.get_spawnable_blocks.random> duration:60s
      - displayitem i@emerald location:<%cuboid%.get_spawnable_blocks.random> duration:60s }
      else narrate "<white><player.flag[Fools_Gold_Cooldown].expiration.formatted><red> before you can use <white>Fool's Gold<red> again."  
          
    # Shoot fireballs in the direction of where the cursor is, they have "weight" so it gives a "bullet drop" effect.
    # As configured here, will not damage blocks or set protected zones on fire.
    # If you wish to enable the above, they are options you can add to the shoot command.
    on player right clicks with i@Meteorite:
    - if !<player.has_flag[Meteorite_Cooldown]> {
      - flag <player> "Meteorite_Cooldown" duration:3s
      - shoot e@fireball height:0.05 gravity:0.01 }  
      
 #============================================================================================================================
    on entity damaged by arrow:
    # this section contains def's and a catch-all to immediately end script if weapon is vanilla, or arrow was not fired by a player.
    - if !<context.damager.is_player> || '<context.damager.item_in_hand.scriptname||null>' == null queue clear
    - define hitter <context.damager>
    - define victim <context.entity>
    
    # Bow of Decay
    - if '<%hitter%.item_in_hand.scriptname.contains[Bow of Decay]>' {
      - cast wither duration:10 power:1 %victim%
      - playsound location:<%victim%.location> sound:wither_death volume:2 pitch:0.01
      - if <%victim%.is_player> && "!<%victim%.has_flag[Hit by Bow of Decay]>" {
        - flag %victim% "Hit by Bow of Decay" duration:120s
        - narrate "<red>You feel your flesh peeling away...strange voices in your head..so much hate.." targets:%victim% }
      - queue clear }
      
    # MerryGoRound
    - if '<%hitter%.item_in_hand.scriptname.contains[MerryGoRound]>' {
      - if <%victim%.is_player> && "!<%victim%.has_flag[Hit by MerryGoRound]>" {
        - flag %victim% "Hit by MerryGoRound" duration:10s
        - narrate "<red>The eery twisted music of a deserted, foggy circus makes you turn...round and round..." targets:%victim% }
      - rotate %victim% duration:5s }
      
    on entity damaged by player:
    # this section contains def's and a catch-all to immediately end script if weapon is vanilla.
    - if '<context.damager.item_in_hand.scriptname||null>' == null queue clear
    - define hitter <context.damager>
    - define victim <context.entity>
    
    # first up - Hammer of the Gods   
    - if '<%hitter%.item_in_hand.scriptname.contains[Hammer of the Gods]>' {
      - if <%victim%.is_player> && '!<%victim%.has_flag[Hit by Gods Hammer]>'  {
        - flag %victim% "Hit by Gods Hammer" duration:120s
        - narrate "<red>The gods curse you... your end is near..." targets:%victim% }
      - strike destination:<%victim%.location> 
      - queue clear }
      
    # next is Lifestealer
    - if '<%hitter%.item_in_hand.scriptname.contains[Lifestealer]>' {
      - playsound location:<%victim%.location> sound:enderdragon_growl volume:0.4 pitch:0.01
      - heal %hitter% 1
      - hurt %victim% 1 
      - queue clear }
    
    # now Bloodsucker
    - if <%hitter%.item_in_hand.scriptname.contains[Bloodsucker]> {
      - define location <%victim%.location.simple>
      - if !<%hitter%.has_flag[bsCooldown]> && <%hitter%.flag[bsBatList].size||0> == 0 {
        - flag %hitter% "bsCooldown" duration:10s
        - flag %hitter% "bsTarget:%victim%"
        - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,1,2]>].as_cuboid>
        - foreach <%cuboid%.get_blocks[air].random[3]> {
          - run instantly "Spawn Bloodsucker Bat" def:%value%|%hitter% }
        - foreach <%hitter%.flag[bsBatList].as_list> {
          - attack %value% target:%victim% }
        - queue clear }
        
      - if <%hitter%.flag[bsBatList].size||0> >= 1 && <%hitter%.flag[bsBatList].as_list||li@> !contains %victim% {
        - flag %hitter% "bsTarget:%victim%"
        - foreach <%hitter%.flag[bsBatList].as_list> {
          - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,2,2]>].as_cuboid>
          - playeffect location:<%cuboid%.get_blocks[air].random> effect:large_smoke
          - define cuboid <el@val[<l@%location%.add[l@-2,-1,-2]>|<l@%location%.add[l@2,1,2]>].as_cuboid>
          - teleport %value% location:<%cuboid%.get_blocks[air].random> 
          - attack %value% target:%victim% }
        - queue clear }
      } 
    # and finally the PTD (personal teleportation device) - first a line to cancel damage, and then events for right and left clicks
    - if '<%hitter%.item_in_hand.scriptname.contains[PTD]>' determine cancelled
    
    on player right clicks with i@PTD:
    - if "<player.has_flag[PTD Locations]>" {
      - playsound location:<player.location> sound:enderman_teleport
      - playeffect location:<player.location> effect:large_smoke
      - narrate "<red>Teleporting to Saved Location [<yellow><player.flag[PTD Locations].size><red>]<&co><white> <player.flag[PTD Locations].get[<player.flag[PTD Locations].size>]>"
      - teleport <player> "location:<player.flag[PTD Locations].get[<player.flag[PTD Locations].size>]>"
      - flag <player> "PTD Locations[<player.flag[PTD Locations].size>]:<-"
      - playsound location:<player.location> sound:enderman_teleport
      - playeffect location:<player.location> effect:large_smoke }
      
      else narrate "<red>You have no coordinates loaded in your PTD..."

    on player left clicks block with i@PTD:
    - if "!<player.has_flag[PTD Locations]>" {
      - flag <player> "PTD Locations:<player.location.cursor_on.add[0,1,0].simple>"
      - narrate "<red>Saved Location [<yellow><player.flag[PTD Locations].size>/3<red>]<&co><white> <player.flag[PTD Locations].get[<player.flag[PTD Locations].size>]>" }

      else if "<player.flag[PTD locations].size>" = 1 {
        - flag <player> "PTD Locations:->:<player.location.cursor_on.add[0,1,0].simple>"
        - narrate "<red>Saved Location [<yellow><player.flag[PTD Locations].size>/3<red>]<&co><white> <player.flag[PTD Locations].get[<player.flag[PTD Locations].size>]>" }
      
      else if "<player.flag[PTD locations].size>" = 2 {
        - flag <player> "PTD Locations:->:<player.location.cursor_on.add[0,1,0].simple>"
        - narrate "<red>Saved Location [<yellow><player.flag[PTD Locations].size>/3<red>]<&co><white> <player.flag[PTD Locations].get[<player.flag[PTD Locations].size>]>" }
      
      else narrate "<red>Your PTD v0.3 is out of memory. You cannot store any more coordinates."
      
    # The following two events run when a player quits or dies. This is to clean up/remove
    # any bats that were spawned with the Bloodsucker item.
    on player quits:
    - if <player.flag[bsBatList].size> >= 1 {
      - foreach <player.flag[bsBatList].as_list> {
        - flag <player> bsBatList:<-:%value%
        - remove %value% }
      - flag <player> bsBatList:! }
    
    on player dies:
    - if <player.flag[bsBatList].size> >= 1 {
      - foreach <player.flag[bsBatList].as_list> {
        - flag <player> bsBatList:<-:%value%
        - remove %value% }
      - flag <player> bsBatList:!
      }
#=====================================================================================================================================
"Bossfight Utility World Scripts":
  type: world
  debug: false
  events:
    # This section is relevant if the boss drop uses the "playerchest" method. It controls who can access the contents of the chest. If the player flag 
    # "LootChestLocation" does not match the location of the chest it uses "determine cancelled" to prevent the inventory window from showing up.
    on player opens chest:
    - define chest <context.inventory.location>
    - if '<global.flag[LootChestList].as_list||null>' contains %chest% && <player.flag[LootChestLocation]||null> != %chest% {
        - narrate "<red>You cannot access the contents of this chest."
        - determine cancelled }

    # If the chest location is on the player flag and the global "GlobalLootChestLocation" list it will despawn when it's closed.
    on player closes chest:
    - define chest <context.inventory.location>
    - if <player.flag[LootChestLocation]||null> == %chest% && '<global.flag[LootChestList].as_list||null>' contains %chest% && %chest% != null {
      - narrate "<red>Chest has been removed..."
      - flag <player> LootChestLocation:!
      - flag global LootChestList:<-:%chest%
      - modifyblock <%chest%.add[l@0,1,0]> air 
      - modifyblock %chest% air }
  #---------------------------------------------------------------------------------------------------------------------------
    # The next event is to show the "blood" effect when you hit a Boss. It uses the the "drip_lava" effect but draws 300 of 
    # them to make it look like a bloody mist. Thanks to blankiito for this effect!  
    on npc damaged by player:
    # the line below originally contained the extra conditional of '&& !<context.entity.has_flag[NoBlood]>' but this flag isn't used or set anywhere.
    - if <global.flag[ListOfBosses].as_list||li@> contains <context.entity> {
      - playeffect location:<context.entity.location> effect:DRIP_LAVA radius:10 qty:200 offset:0.15 }   
  #-------------------------------------------------------------------------------------------------------------------------------
    # There is a chance the NPC (boss or minions) can hurt themselves, so even though it's not the most effective world script, 
    # it will at least check to see if the "damager" is the boss or a minion and if so, cancel the damage
    on npc damages npc:
    - if <context.entity> == <context.damager> && <global.flag[ListOfBosses].as_list||null> contains <context.entity> determine cancelled
      else if <context.entity> == <context.damager> && <global.flag[AllMinions].as_list||null> contains <context.entity> determine cancelled
      else if <context.damager> == <npc.flag[MinionCreator]||null> determine cancelled
      else if <npc.flag[AllMyMinions].as_list||null> contains <context.damager> determine cancelled
      
#====================================================================================================================
"Health Status Bar":

# The following script builds up a health bar for the NPC. It does this by dividing their current health by 10, the result of that, say 7.2 is
# then rounded down to 7. It then repeats a loop 7 times, each time adding 10 "|" characters into a flag. So 7 x ||||||||||.. the remaining 2 (7.2)
# then just gets added onto that, e.g. ||
#
# The reason I did it this way was so that it didn't repeat the loop 70 times to build up the number of health bars.
#
# In the example, 72 bars will be <GREEN> and the remaining 28 bars will be <RED>.
#
# This can be used with any NPC regardless of how much health they have because it uses their "percentage" of health rather than max value health.

  type: task
  debug: false
  script:
  - ^if <npc.health.percentage||0> == 0 queue clear
  - ^if <npc.health.percentage> == 100 narrate "<red><npc.name.substring[1,12]> Health<&co><white> [<green>||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<white>]"
    
    else {
      - ^define GreenTenCount <el@val[<m:floor(<npc.health.percentage>/10)>].asint>
      - ^define GreenTenTotal <el@val[<m:%GreenTenCount%*10>].asint>
      - ^define GreenOneCount <el@val[<m:<npc.health.percentage>-%GreenTenTotal%>].asint>

      - ^define RedTenCount <el@val[<m:floor(<m:100-<npc.health.percentage>>/10)>].asint>
      - ^define RedTenTotal <el@val[<m:%RedTenCount%*10>].asint>
      - ^define RedOneCount <el@val[<m:<m:100-<npc.health.percentage>>-%RedTenTotal%>].asint>

      - ^repeat %GreenTenCount% {
        - flag <npc> "GreenBars:<npc.flag[GreenBars]|||>||||||||||" }
      - ^repeat %GreenOneCount% {
        - flag <npc> "GreenBars:<npc.flag[GreenBars]|||>|" }
      - ^repeat %RedTenCount% {
        - flag <npc> "RedBars:<npc.flag[RedBars]|||>||||||||||" }
      - ^repeat %RedOneCount% {
        - flag <npc> "RedBars:<npc.flag[RedBars]|||>|" }
      - ^if !<npc.has_flag[RedBars]> narrate "<red><npc.name.substring[1,12]> Health<&co><white> [<green><npc.flag[GreenBars]><white>]"
        else narrate "<red><npc.name.substring[1,12]> Health<&co><white> [<green><npc.flag[GreenBars]><red><npc.flag[RedBars]><white>]"
      - ^flag npc GreenBars:!
      - ^flag npc RedBars:!
    }
     
#====================================================================================================================================      
      
# "Legendary and Epic Item Effects":  # these still being debugged
  # type: world
  # debug: true
  # events:

    # # Doppelganger - head skins ? broken with 1.7 client. I have a plan to change this one considerably.
    # on player right clicks entity with i@Doppelganger:
    # - if <context.entity.equipment.helmet.skin> == <player.name> narrate "<red>Entity is already your Doppelganger."
      # else if <context.entity.is_mob> || <context.entity.is_player> {
        # - if '<player.flag[Doppelganger Cooldown]>' == null {
          # - if <context.entity.equipment.helmet> != null && <context.entity.is_player> {
            # - give to:<context.entity.inventory> <context.entity.equipment.helmet> }
          # - flag <player> "Doppelganger Cooldown" duration:30s
          # - head <context.entity> skin:<player> }
      # }
      # else if "<player.flag[Doppelganger Cooldown]>" != null narrate "<white><player.flag[Doppelganger Cooldown].expiration.formatted><red> before you can use <white>Doppelganger<red> again."
