# Boss Fight - Multi-stage and Highly Configurable
  #
  # Currently updated to run with:-
  # Citizens 2 (build #1186)
  # Denizen 0.9.6 (build #1544)
  # JSentry 1.0 (a denizen script that replaces the Sentry plugin.)
  #
  # To assign to an NPC, type:
  # /npc assign --set "NewMoonBoss"
  #
  # DISCLAIMER:
  # ===========
  # This is an advanced script. You should test this script before you use it on your LIVE server. Some of the item drops
  # ignore ZONE PROTECTION. So if you play on a strict server you will want to disable those items by removing them from 
  # the "NewMoonBoss Determine Loot" script, in the separate Bossfight_loot yaml file.
  #
  # DESCRIPTION:
  # ============
  # This is a four stage boss fight with a bunch of simple configuration options that will allow you to create a unique 
  # boss fight. You can decide how many stages you want to enable, how difficult the boss should be (health, armour, 
  # strength), whether it should spawn minions and if so, how many, how difficult etc. The boss has several different 
  # 'special attacks' that can be used directly on players or inside a "cuboid", which you have to specify in the constant 
  # values at the top of the script.
  #
  # The boss can heal or reset itself if no one is in range.
  #
  # When the boss is killed, it can drop random loot (defined in item scripts that are located in the separate 
  # Bossfight_items_and_world_scripts.yml) directly into players inventory, on the floor around the boss or into secure 
  # chests for each of the boss fighters.
  #
  # At the end of the fight, it will show a summary in-chat of total damage, hit count, minion kills etc for each player.
  #
  # FEATURES:
  # =========
  #  * Boss and/or Minions, all fully configurable (quantity, health, armour, strength)
  #  * Special Attacks (arrow spells, lightning storm, arrows dropping from ceiling)
  #  * Boss heal/reset itself if inactive
  #  * Unique item drops, using item scripts and world events
  #  * Text scoreboard showing battle summary stats
  #  * Shows health bar when you right click boss or minion.
  #
  # TODO/POSSIBLE FUTURE FEATURES:
  # ==============================
  #  * Re-work the special attack arrow handling to use the 'script:' option in the shoot command (DONE)
  #  * add in a true Boss Health Bar. (keeping the current bar for displaying minion health.) (DONE)
  #  * Fix damage recording so that only 100% damage is recorded. (DONE)
  #  * Add options to change Boss and Minion behaviours. (e.g. using bodyguard mode for some Minion stages.) (SOME ADDED) 
  #  * convert whole script to use JSentry attack loop & target finding, in place of Sentry. (WIP)
  #  * Add option for Bosses to load scenery and/or structures in the arena (will require WorldEdit and Depenizen)
  #  * Re-work scoreboard setup to use denizen scoreboard commands/ 
  #  * explore possibility of having a rotating set of scoreboards for each stat.
  #  * look into using yaml commands for saving and loading boss configurations. (probably the last to be done)
  #
  # NOTE: 
  # ====
  # If you want to use this on more than one NPC you simply need to do a FIND on the word 'NewMoonBoss' and REPLACE it 
  # with your NPC name. Then make another copy of the script and do another FIND/REPLACE for every boss NPC that will use 
  # this.
  #
  # CREDITS:
  # ========
  # Many thanks to mythanical for the original version of this script, and to the Denizen team for the amazing plugin, and 
  # their support on #Denizen-dev
  # 
  # Mythanical gave the following credits:-
  # Thanks to aufdemrand, davidcernat and mcmonkey for fixing/adding things in Denizen. Thanks to Matterom and blankiito 
  # for example scripts on the work they've done on custom items and effects.
  #
  #
  # @original script by mythanical
  # @updated/rewritten by Jabelpeeps
  # @server this script is running on:- Remypas.com (from lobby, go to Jewelcraft world.)
  # @irc EsperNet IRC Network #denizen-dev

#====================================================================================================================================
"NewMoonBoss":
  type: assignment
  debug: true
   
  default constants:
  # Boss Specific Constants
    # --------------------------------------------------------------------------------------------------------
    # NOTE: 'Player' entity type NPC's are fully supported, but other types may give you some interesting, unexpected or 
    # undesired results. Especially when you try and equip them with a weapon.
    #
    # The following NPC types are available as part of Citizens (http://wiki.citizensnpcs.com/Types):
    #
    # blaze, bat, cave_spider, chicken, creeper, cow, enderman (goes crazy in rain), ender_dragon (not recommended), ghast 
    # (not recommended), giant (massive zombie!), iron_golem, magma_cube (careful! damages nearby players), mushroom_cow, 
    # ocelot, pig, pig_zombie, player (skin name is configurable), sheep, silverfish, squid (can't walk on land...duh), 
    # snowman, wolf, skeleton, slime, spider, witch, witherboss (does not move), villager, zombie (burns in sunlight, but 
    # invulnerable)
    # --------------------------------------------------------------------------------------------------------

    World Name: frozen_spring
    Boss Entity Type: player
    # Only valid if 'player' entity type is selected. This is the skin of our server owner, any valid MC registered skin should work.
    Boss Skin: RemyPas      
    
    # adult                 (Normal NPC type)
    # baby                  (Cause the Boss to be a baby. Note: Not all entity types have a baby version)
    Boss Age: adult

    # *************  This list is no longer relevant as these weapons are part of the deprecated sentry plugin. ************
    # bow                   (Archer - Range is 50 meters on flat ground.)
    # redstone_torch_on     (Pyromancer I - Shoot small, non-incendiary fireballs)
    # torch                 (Pyromancer II -  Shoot fireballs that set the land on fire)
    # blaze_rod             (Pyromancer III - Shoot large, explosive fireballs that set the land on fire)
    # snow_ball             (Ice Magi - Throw snowballs which slow enemies on contact. Range is about 25 blocks on flat ground)
    # egg                   (Bombardiers - explode?  Eggs have a range of about 25 blocks on flat ground)
    # potion                (Witch Doctor - Will throw a splash version of whatever potion type it is equipped with)
    # paper                 (Stormcaller I - Strike single targets with bolts of electricity)
    # book                  (Stormcaller II - Smite multiple foes. This lightning's damage is atmospheric and therefore is not affected by the Sentry's strength)
    # book_and_quill        (Stormcaller III - Bolts instantly kill any living thing they touch regardless of health, armour, or play mode)
    # ender_pearl           (Warlock I - Fling targets high into the air)
    # skull_item            (Warlock II - Mid-range warlock shoots black explosive wither skulls at the enemy)
    # none                  (Brawler - Swords, axes, picks, shovels, rocks, bricks, or even fish, the brawlers take the fight to the enemy, hand to hand)
    Boss Weapon: DIAMOND_SPADE
  
    # This is the boss's starting health
    Boss Health: 500
    # This is how many hearts of damage the boss will do per hit.
    Boss Strength: 3
    # This is a percentage damage reduction that is applied to damage to the boss. 
    # (set to -1 for armour to be calculated from worn armour)
    Boss Armour: 40
    # The range at which the boss will select targets to attack and/or loose track of current targets.
    Boss Attack Range: 20
    # The speed at which the boss moves when attacking.
    Boss Movement Speed: 1
    # The number of ticks between attacks (has to be a multiple of 10)
    Boss Attack Rate: 10

    # If all players have left the boss proximity, this enables the boss to heal itself slowly.
    Boss Self Healing: "Yes"

    # Set the location where your boss will respawn
    Boss Spawn Location: "259,107,449,frozen_spring"

    # Set to -1 if you never want the boss to respawn and be permanently destroyed on death. 
    Boss Respawn Delay: 600

    # Boss fight will reset after the configured number of seconds of inactivity. 
    # Set to 0 if you don't ever want it to reset and allow players to come back later to finish it.
    Boss Reset Timer: 180

    # configure "yes" to give players loot after beating the Boss, and "no" to not give loot.
    Drop Loot on Death: "Yes"

    # The specifies how many randomly selected loot items per player
    Loot Quantity: 1

    # This specifies how the loot should be distributed.
    # player                (Put the item into the players inventory)
    # boss                  (Drop the loot on the ground around the boss)
    # chest                 (Spawn a chest with all the loot inside it where the boss died)
    # playerchest           (Create a chest next to each player that only they can access)
    Loot Distribution: playerchest
    
    # To prevent any loot chests from staying forever, give them any value other than 0 and they will expire..dropping all 
    # the loot on the floor.  They will also be removed when the Boss respawns.
    Loot Chest Expiry: 300

    # Enable scoreboard (on right side of screen) to show either Minion Kills or Boss Health Damage by each player during the fight. 
    # This gets removed when the boss is killed.
    # bosshealth            (Show running damage dealt to boss by each player)
    # minionkills           (Show a count for number of minions killed by players)
    # minionhealth          (Show the running damage dealt to minions by each player)
    # none                  (No running battle scoreboard)
    Scoreboard: bosshealth

    # The cuboid is the square area (a room) where most of the fighting will take place. This area can be used in the options below
    # to allow mobs to be spawned in it or to have some of the boss special fighting skills to take place in. 
    Cuboid Spawn Area Poss 1: "219,102,403,frozen_spring"
    Cuboid Spawn Area Poss 2: "304,112,477,frozen_spring"

    # What will trigger the start of the boss fight? 
    # proximity  (Activate if a player walks into the proximity specified in the "Boss Awareness Range" constant value below)
    # damage     (Activate boss fight when damaged by a player)
    Bossfight Activator: proximity 
    # Awareness range is the distance used to trigger the fight if 'proxmity' is selected above, and is separate from the 
    # attack range specified further up. This is also the range in which special attacks will be triggered, and - when empty # of players - will trigger the boss's self-healing and reset timer.
    Boss Awareness Range: 55

    # Currently the script supports 4 battle stages, as currently written. A stage is reached/unlocked when the boss is down 
    # to a specified health percentage. You decide the boss health percentage, minion names, the quantity to spawn, NPC types 
    # and how/where they spawn. If you want less stages, simply remove them from the list. If you don't want any, type in 
    # "none". Make sure to type it as "One|Two|Three|Four". If you only want the first two stages, type it as: One|Two  If 
    # you want more stages, you will need to modify several sections of the script to allow this.
    Enabled Boss Stages: One|Two|Three|Four
    
    # The sections below detail the separate values for each of the 4 stages of the boss fight. You should modify these to 
    # make each boss fight unique.
  
  # Boss Fight - Stage One
    Stage One Boss Health Percentage: 100

    # none                  (No effect around NPC)
    # flame                 (Create a fiery effect around the boss)
    # heart                 (Surrounds the boss with love hearts - kill you with love??)
    # smoke                 (Create a smokey 'pop' effect around the boss)
    # ender                 (Create the Enderman particles around NPC)
    # potbreak              (Not very good, also makes the pot break sound)
    # explosion             (Creeper explosion effect, causes no damage)
    Stage One Boss Aura: smoke

    # "Poison Arrow"        (Shoot a poisonous arrow towards a randomly chosen player. Only casts when the player is hit)
    # "Wither Arrow"        (Cast wither...)
    # "Weakness Arrow"      (Cast weakness...)
    # "Slowness Arrow"      (Cast slowness...)
    # "Rain Arrows"         (Rain arrows from the sky - arrows are dropped within the cuboid defined above.)
    # "Lightning Bolt"      (Hit a single random player with a lightning bolt - this never misses)
    # "Lightning Storm"     (Several damaging lightning bolts - strikes occur within the cuboid defined above.)
    # "TNT"                 (Boss tosses a block of primed tnt at a random player)
    # "TNT Drop"            (Drop blocks of TNT in random locations in the cuboid)
    # "Throw"               (Throw players from their current position to a random location inside the cuboid)
    # "Firestarter"         (Ignite random blocks in the cuboid)
    # none                  (No special attack)
    Stage One Special Attack: "Slowness Arrow"
    
    # This number is only relevant to the following attacks:- "Rain Arrows", "Lightning Storm", "TNT Drop", "Throw", 
    # & "Firestarter" and it configures the number of the attack events to be run inside the cuboid defined above. (The other 
    # special attacks target a random player, and this option will be ignored.)
    Stage One Special Attack Quantity: 0

    # The special attack runs on a loop, repeating every...
    Stage One Special Attack Delay: 20s

    # available minion options are in most cases identical to the boss options, therefore see explanations in the boss 
    # options section for details.
    Stage One Spawn Minions: "Yes"
    Minion One Type: cave_spider
    Minion One Skin: none
    Minion One Age: adult          
    Minion One Name: Crawlie
    Minion One Weapon: none
    Minion One Health: 10
    Minion One Quantity: 40
    Minion One Attack Range: 20
    Minion One Strength: 1
    Minion One Armour: 20
    Minion One Speed: 1.5
    Minion One Attack Rate: 20
    
    # Guardmode can be:-
    # lookout    (stays where spawned until attacking, attacks when players come within the attack range) or 
    # bodyguard  (follows the boss, and attacks any player who harms the boss, stops attacking when player leaves attack range)
    Minion One Guardmode: lookout
    
    # lightning             (lightning bolt with sound)
    # explode               (harmless explosion effect with sound)
    # none                  (no effect)
    Minion One Spawn Effect: lightning

    # player: spawn around random player
    # boss: spawn around boss
    # cuboid: spawn anywhere inside the cuboid values you specified above
    Minion One Spawn Location: cuboid
    
  # Boss Fight - Stage Two
    Stage Two Boss Health Percentage: 75
    Stage Two Boss Aura: ender
    Stage Two Special Attack: "Wither Arrow"
    Stage Two Special Attack Quantity: 0
    Stage Two Special Attack Delay: 30s
    Stage Two Spawn Minions: "Yes"
    Minion Two Type: zombie
    Minion Two Skin: none
    Minion Two Age: baby
    Minion Two Name: RemyBaby
    Minion Two Weapon: none
    Minion Two Health: 20
    Minion Two Quantity: 30
    Minion Two Attack Range: 10
    Minion Two Strength: 2
    Minion Two Armour: 20
    Minion Two Speed: 1.4
    Minion Two Attack Rate: 10
    Minion Two Guardmode: bodyguard
    Minion Two Spawn Effect: lightning
    Minion Two Spawn Location: boss
    
  # Boss Fight - Stage Three
    Stage Three Boss Health Percentage: 60
    Stage Three Boss Aura: flame
    Stage Three Special Attack: "TNT Drop"
    Stage Three Special Attack Quantity: 40
    Stage Three Special Attack Delay: 20s
    Stage Three Spawn Minions: "Yes"
    Minion Three Type: blaze
    Minion Three Skin: none
    Minion Three Age: adult
    Minion Three Name: FireElement
    Minion Three Weapon: none
    Minion Three Health: 20
    Minion Three Quantity: 15
    Minion Three Attack Range: 30
    Minion Three Strength: 2
    Minion Three Armour: 40
    Minion Three Speed: 1
    Minion Three Attack Rate: 20
    Minion Three Guardmode: bodyguard
    Minion Three Spawn Effect: explode
    Minion Three Spawn Location: boss

  # Boss Fight - Stage Four
    Stage Four Boss Health Percentage: 40
    Stage Four Boss Aura: flame
    Stage Four Special Attack: Firestarter
    Stage Four Special Attack Quantity: 40
    Stage Four Special Attack Delay: 10s
    Stage Four Spawn Minions: "Yes"
    Minion Four Type: iron_golem
    Minion Four Skin: none
    Minion Four Age: adult
    Minion Four Name: Terminator
    Minion Four Weapon: none
    Minion Four Health: 50
    Minion Four Quantity: 10
    Minion Four Attack Range: 20
    Minion Four Strength: 3
    Minion Four Armour: 60
    Minion Four Speed: 2
    Minion Four Attack Rate: 40
    Minion Four Guardmode: bodyguard
    Minion Four Spawn Effect: lightning
    Minion Four Spawn Location: cuboid
    
 #========================Action scripts====================================================================
  # Congratulations, if you have reached this point, you have configured all the options you need.
  # 
  # ***WARNING*** Only edit the script past this point if you know what you're doing!! ***WARNING***
  #=========================================================================================================
  
  actions:
 #--------------------------Boss 'on assignment'------------------------------------------------------------
    on assignment:
    # Due to a 'feature' in citizens, that triggers the spawn and despawn actions several times during the processing of this 
    # assignment action, I have needed to use flags to stop the spawn & despawn scripts from running until this one has 
    # completed.
    - if !<npc.has_flag[ActionActive]> flag npc ActionActive duration:2s
    - flag npc PreventImmediateDespawn duration:2s
    
    # For this script, the click trigger is only used to return the boss's health. (disabled when boss-bar added.)
    # - trigger name:click state:true
    
    # Proximity set to the radius specified in the "Boss Awareness Range" constant.
    - trigger name:proximity state:true 'radius:<npc.constant[Boss Awareness Range]>'
    # Damage trigger does a whole bunch of stuff which I'll explain in that section.
    - trigger name:damage state:true

    # Create a NPC flag called "cuboid" that stores the cuboid values in a simple shorter name which makes it easy for reuse.
    - flag npc 'cuboid:<el@val[<npc.constant[Cuboid Spawn Area Poss 1]>|<npc.constant[Cuboid Spawn Area Poss 2]>].as_cuboid>'

    # The following commands sets up the Boss using the values specified in the constants above.
    - teleport <npc> 'location:<npc.constant[Boss Spawn Location]>'
    - adjust <npc> 'set_entity_type:<npc.constant[Boss Entity Type]>'
    - if '<npc.constant[Boss Age]>' == baby {
      - age <npc> baby lock }
    - if '<npc.constant[Boss Entity Type]>' == player {
      - adjust <npc> 'skin:<npc.constant[Boss Skin]>' }
    - anchor id:BossSpawn add 'location:<npc.constant[Boss Spawn Location]>'
    - lookclose state:true 'range:<npc.constant[Boss Attack Range]>'
    - trait state:true pushable
    - health state:true
    - vulnerable state:true
    - flag npc jsentry.is_jsentry
    - flag npc 'jsentry.attackrate:<npc.constant[Boss Attack Rate]>'
    - flag npc 'jsentry.walkspeed:<npc.constant[Boss Movement Speed]>'
    - flag npc 'jsentry.damage:<npc.constant[Boss Strength]>'
    - flag npc 'jsentry.armour:<npc.constant[Boss Armour].div[100]>'
    - flag npc 'jsentry.range:<npc.constant[Boss Attack Range]>'
    - if '<npc.constant[Boss Weapon]>' != none {
      - equip <npc> 'hand:<npc.constant[Boss Weapon]>' }
    - flag npc 'jsentry.targets:player'

    # Put the boss stages into a flag - this will be used throughout to check which boss stages should be activated.
    - flag npc 'Enabled Boss Stages:<npc.constant[Enabled Boss Stages]>'
    # see note at top of this script for an explanation of what this last flag does.
    - flag npc ActionActive:!    
    - inject locally 'actions.on spawn' 
    
 #--------------------------Boss 'on spawn'-----------------------------------------------------------------
    on spawn:
    # see note at top of the 'on assignment' script for an explanation of what this flag does.
    - if <npc.has_flag[ActionActive]> queue clear
    - flag npc PreventImmediateDespawn duration:2s
    
    # These commands are specific to our world, as it uses a fixed cuboid location. It puts out any fires remaining behind from the previous fight.
    # Adjust the coordinates to match your world, or remove entirely if you want the fires to continue burning.
    - if !<el@val[l@210,102,398,frozen_spring|l@311,124,496,frozen_spring].as_cuboid.get_blocks[fire].is_empty> {
      - modifyblock <el@val[l@210,102,398,frozen_spring|l@311,124,496,frozen_spring].as_cuboid.get_blocks[fire]> air }
    
    # Teleport boss back to starting point.
    - teleport <npc> 'location:<npc.constant[Boss Spawn Location]>'
    # add global flag so that Minions of this boss can easily access his NPC.id
    - flag global NewMoonBossID:<npc> 
    # the npc now adds itself back to the list of bosses (if needed)
    # This is used in world events to prevent Boss/minion 'friendly fire' harm.
    - if <global.flag[ListOfBosses].as_list||li@> !contain <npc> flag global ListOfBosses:->:<npc>

    # Every time the boss spawns after it's been killed, it'll run through the following process to do some 'clean-up' from the previous battle.
    #
    # First it runs through a global "minion" list and check to see whether they are spawned and if they have a "creator". If they were created
    # by this Boss, it then removes them from the global list and executes the "remove" command to permanently get rid of them.
    #
    # Clear the Sentry target list, so it doesn't attack players unprovoked.
    #
    # Remove the "R.I.P" sign it placed when and where it died.
    #
    - adjust <npc> 'max_health:<npc.constant[Boss Health]>'
    - adjust <npc> 'health:<npc.constant[Boss Health]>'
    - flag <npc> jsentry.target:!
    - if <npc.has_flag[BossDied]> {
      - flag npc BossDied:!
      - foreach <global.flag[AllMinions].as_list||li@> {
        - if !<util.npc_is_valid[%value%]> flag global AllMinions:<-:<util.as_element[%value%]>
          else if <%value%.flag[MinionCreator]||null> == <npc> {
          - flag global AllMinions:<-:%value%
          - remove %value% }
        }
      - define deathlocation <npc.flag[DeathLocation].as_location||null>
      - if <%deathlocation%.block.sign_contents||null> contains <npc.name> modifyblock %deathlocation% air
      - run "NewMoonBoss Loot Chest Expiry"
    }
    
    # Now the clean up is finished it is time to set up the Minecraft scoreboard.
    #
    # First it checks to see if its meant to create a Scoreboard, if so, it'll flag the NPC with what the scoreboard should show:
    #   * bosshealth
    #   * minionkills
    #   * miniondamage
    # It uses the "substring" to put a limit in place for the length of the boss's name because if the name is too long, the scoreboard will fail to create.  
    #
    - if <npc.constant[Scoreboard]> != none && !<npc.has_flag[Scoreboard]> {
      - flag npc Scoreboard:<npc.constant[Scoreboard]>
      - if <npc.flag[Scoreboard]> == "bosshealth" {
        - execute as_server "scoreboard objectives add <npc.name.substring[1,9]>.Damage dummy" silent
        - execute as_server "scoreboard objectives setDisplay sidebar <npc.name.substring[1,9]>.Damage" silent
        - queue clear }
      - if <npc.flag[Scoreboard]> == "minionkills" {
        - execute as_server "scoreboard objectives add <npc.name.substring[1,5]>.MinionKills dummy" silent
        - execute as_server "scoreboard objectives setDisplay sidebar <npc.name.substring[1,5]>.MinionKills" silent
        - queue clear }
      - if <npc.flag[Scoreboard]> == "minionhealth" {
        - execute as_server "scoreboard objectives add <npc.name.substring[1,6]>.MinionDmg dummy" silent
        - execute as_server "scoreboard objectives setDisplay sidebar <npc.name.substring[1,6]>.MinionDmg" silent 
        - queue clear }
    }

 #--------------------------Boss 'on remove'----------------------------------------------------------------
    on remove:
    # makes sure that the despawn actions are carried out if someone uses '/npc remove'
    - inject locally 'actions.on despawn'
    
 #--------------------------Boss 'on death'-----------------------------------------------------------------
    on death:
    # Clean-up that needs to happen when the boss dies. 
    
    # This flag is used to stop other events from being triggered, and to prevent certain "on spawn" commands from running 
    # unless the boss actually died. 
    - flag npc BossDied
    # This line will terminate the special attack queue immediately on the death of the Boss
    - if <queue.exists[<npc.name>SpecialAttack]> queue 'queue:<npc.name>SpecialAttack' clear
    
    # Here are some 'foreach' loops to remove all the minions that were created during the various stages. 
    # Each minion was added to the boss flag list and now it simply iterates through removing each minion 
    # by substituting %value% with their NPC ID, e.g.  n@123    
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
    # the %value% on the next line is the Boss fight stage, from the foreach on the line above.
      - foreach '<npc.flag[Stage%value%Minions].as_list>' {  
    # the %value% on the next lines is now the NPC ID.
        - flag global AllMinions:<-:%value%
        - if <npc> != %value% remove %value% 
      }                
    }
    # It then clears the minion list for each battle stage. NB adding this to the previous foreach loop produced unwanted behaviour.
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
      - flag npc 'Stage%value%Minions:!' 
      }
    # remove bossbar from players.
    - foreach <npc.flag[BossPlayerList].as_list||li@> {
      - adjust %value% show_boss_bar:!
      }
    # Remove/comment out the next 2 lines if you don't want a sign marking where the Boss Died.
    # What it does is flag where the boss died and post a sign with the boss's name, followed by "was defeated here". 
    # The "|" in the sign command means go onto the next line of the sign.
    - flag npc DeathLocation:<npc.location.simple>
    - sign <npc.flag[DeathLocation]> "<npc.name>|was defeated|here."

    # The following section builds the text scoreboard that is displayed in the Minecraft chat when the boss has been killed.
    #
    # The IF checks to see if anybody hit the boss at any point (using the "BossHitList" flag).
    # You'll see further down that this list is populated by the damage trigger from when the boss is hit by a player.
    #
    # It then announces to the server the result of the battle. It uses a foreach loop to cycle through
    # all players that hit the boss (even those that didn't penetrate its armour) and shows for each player
    # how much damage, their overall damage percentage and the number of times they hit the boss.
    #
    # If the player also damaged and killed minions, it will show another line with minion total damage, hit count and number of minions killed.
    #
    # This is all recorded into flags during the damage trigger and on death action for the boss and minions.
    #
    # At the bottom it shows a list of all players that got into the "Boss Awareness Range" but never damaged/hit the boss or minions, e.g SPECTATORS.
    #
    # During the foreach loop, it also clears all the player flags to ready them for their next battle.

    - if <npc.has_flag[BossHitList]> {
      - announce "<green>-----------------------------------------------"
      - announce "<red>BOSS EVENT<&co> <white><npc.name><red> has been killed by <yellow><npc.flag[BossHitList].formatted>"
      - announce "<green>-----------------------------------------------"
      - announce "<green><underline>Battle Stats<&co><&r>  <red><npc.name> Total Health<&co> <npc.health.max.as_int>"
      - define maxHealth <npc.health.max>
      - define BossDamage '<npc.name>TotalDamage'
      - foreach <npc.flag[BossHitList].as_list> {
        - define PlayerBossDamage <%value%.flag[%BossDamage%]||0>
        - define DamagePercent <el@val[<m:%PlayerBossDamage%/%maxHealth%*100>].as_int>
        - announce "<yellow><%value%.name>"
        - define HitCount '<npc.name>HitCount'
        - announce "<aqua>Boss Damage <gold>%PlayerBossDamage% (%DamagePercent%<&pc>) <aqua>- Hits <gold><%value%.flag[%HitCount%].as_int>"
        - define MinsDamage '<npc.name>MinsDamage'
        - if <%value%.flag[%MinsDamage%]||null> != null {
          - define MinsKilled <npc.name>MinsKilled
          - define MinsHit <npc.name>MinsHit
          - announce "<aqua>Combined Minion Damage <gold><%value%.flag[%MinsDamage%].as_int||0> <aqua>- Hits <gold><%value%.flag[%MinsHit%].as_int||0> <aqua>- Minions Killed <gold><%value%.flag[%MinsKilled%].as_int||0>" }
        - flag %value% <npc.name>TotalDamage:!
        - flag %value% <npc.name>HitCount:!
        - flag %value% <npc.name>MinsKilled:!
        - flag %value% <npc.name>MinsHit:!
        - flag %value% <npc.name>MinsDamage:! }
      - announce "<green>-----------------------------------------------" }
    - if <npc.has_flag[BossSpectatorList]> {
      - foreach <npc.flag[BossSpectatorList].as_list||li@> {
        - if <npc.flag[BossHitList].as_list> contains %value% flag npc BossSpectatorList:<-:%value% }
      - if <npc.flag[BossSpectatorList].size> >= 1 announce "Spectators <npc.flag[BossSpectatorList].formatted||none>" }
   
    # Now we check to see if the "Drop Loot on Death" is set to "Yes", and if so run the task called "NewMoonBoss Drop the Loot" instantly.
    - if '<npc.constant[Drop Loot on Death]>' == "Yes" run "NewMoonBoss Drop the Loot" instantly
      
    # Remove any visual effects applied at fight stages and clear sentry targets.
    - execute as_server "npc sel <npc.id>" silent
    - execute as_server "npc effect --play none" silent
    - flag <npc> jsentry.target:!
   
    # If the scoreboard was enabled, this will remove it so it doesn't stay behind on player's screens.
    - if <npc.has_flag[Scoreboard]> {
      - if <npc.flag[Scoreboard]> == "bosshealth" execute as_server "scoreboard objectives remove <npc.name.substring[1,9]>.Damage" silent
        else if <npc.flag[Scoreboard]> == "minionkills" execute as_server "scoreboard objectives remove <npc.name.substring[1,5]>.MinionKills" silent
        else if <npc.flag[Scoreboard]> == "minionhealth" execute as_server "scoreboard objectives remove <npc.name.substring[1,6]>.MinionDmg" silent
      - flag npc Scoreboard:!
    }
    # Clear all the flags used during the fight to set boss up for the next fight.
    - flag npc PreviousHealth:!
    - flag npc BossHitList:!
    - flag npc BossSpectatorList:!
    - flag npc BossStage:!
    - flag npc BossPlayerList:!
    - flag npc ActiveSpecialAttackStage:!
    - flag global ListOfBosses:<-:<npc>
    - flag npc MinionSpawnedStage:!
    - flag npc AllMyMinions:!
    - flag npc BossResetTimer:!
    - flag npc HealActive:!

 #--------------------------Boss 'on despawn'---------------------------------------------------------------
    on despawn:
    # see note at top of the 'on assignment' script for an explanation of what this flag does.
    - if <npc.has_flag[PreventImmediateDespawn]> queue clear
    - narrate target:p@Jabelpeeps "running despawn actions now"
    
    # a check to stop this script running if the boss is already dead.
    - if <npc.has_flag[BossDied]||null> queue clear
    
    # otherwise, this script contains a sub-set of the 'on death' script commands.
    - define SpecialAttackQueue '<npc.name>SpecialAttack'
    - if <queue.exists[%SpecialAttackQueue%]> queue 'queue:%SpecialAttackQueue%' clear
    - define BossHealQueue <npc.name>_BossHeal
    - if <queue.exists[%BossHealQueue%]> queue 'queue:%BossHealQueue%' clear
    
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
      - if <npc.has_flag[Stage%value%Minions]> {
        - foreach <npc.flag[Stage%value%Minions].as_list> {
          - flag global AllMinions:<-:%value%
          - if <npc> != %value% remove %value% 
        }
      }
    }
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
      - flag npc 'Stage%value%Minions:!' }
    - flag npc MinionSpawnedStage:!
    
    # remove bossbar 
    - foreach <npc.flag[BossPlayerList].as_list||li@> {
      - adjust %value% show_boss_bar:!  
      }
    - if <npc.flag[BossHitList].size> >= 1 {
      - foreach <npc.flag[BossHitList].as_list> {
        - flag %value% <npc.name>TotalDamage:!
        - flag %value% <npc.name>HitCount:!
        - flag %value% <npc.name>MinsKilled:!
        - flag %value% <npc.name>MinsHit:!
        - flag %value% <npc.name>MinsDamage:! 
      }
    }
    - execute as_server "npc sel <npc.id>" silent
    - execute as_server "npc effect --play none" silent
    - flag <npc> jsentry.target:!
    - if <npc.has_flag[Scoreboard]> {
      - if <npc.flag[Scoreboard]> == bosshealth execute as_server "scoreboard objectives remove <npc.name.substring[1,9]>.Damage" silent
        else if <npc.flag[Scoreboard]> == minionkills execute as_server "scoreboard objectives remove <npc.name.substring[1,5]>.MinionKills" silent
        else if <npc.flag[Scoreboard]> == minionhealth execute as_server "scoreboard objectives remove <npc.name.substring[1,6]>.MinionDmg" silent
      - flag npc Scoreboard:!
    }
    - flag npc PreviousHealth:!
    - flag npc BossHitList:!
    - flag npc BossSpectatorList:!
    - flag npc BossStage:!
    - flag npc BossPlayerList:!
    - flag npc ActiveSpecialAttackStage:!
    - flag global ListOfBosses:<-:<npc>
    - flag npc AllMyMinions:!
    - flag npc BossResetTimer:!
    - flag npc HealActive:!
    
 #--------------------------Boss 'on damaged'---------------------------------------------------------------
    on damaged:
    # first a short delay to allow jsentry's damage events to complete.
    - wait 1t
    # As this script is not automatically linked to a player, it uses <context.damager> instead, with the next line checking 
    # whether this is a player, cancelling the damage if not.
    - if <context.damager> matches player {
      - define player <context.damager> 
      }
      else determine cancelled
      
    # this line checks a flag to stop the script running if it is already running - which would mess with the damage 
    # accounting for the scoreboard.  The flag is removed after the health change calculation is complete.
    - if <npc.has_flag[DamageScriptActive]> determine cancelled else flag npc DamageScriptActive duration:1s
    
    # a flag to help track arrows fired during the bossfight, by identifying players who are in the fight with a flag.
  #  - if <def[player].flag[PlayerBossList].as_list||li@> !contains <npc> && <def[player].name> != <npc.name> flag %player% PlayerBossList:->:<npc>
    # If the player managed to get through the "entry proximity" without being added to the "BossPlayerList" it will do it now.
    - if <npc.flag[BossPlayerList].as_list||li@> !contains %player% flag npc BossPlayerList:->:%player%
    # Add the player into the "BossHitList" if they aren't already.
    - if <npc.flag[BossHitList].as_list||li@> !contains %player% flag npc BossHitList:->:%player%
    # To count the number of times the player has hit the boss. Add "+1" every time they trigger this.
    - flag %player% <npc.name>HitCount:++
    
    # The damage amount is then added to the total damage flag. But first we need to subtract the current health from the previous health (or the
    # max health if this is the first run of the script).
    - define MaxHealth '<npc.constant[Boss Health]>'
    - define pHealth <npc.flag[PreviousHealth]||%MaxHealth%>
    - define cHealth <npc.health||0>
    - define DamageDealt <m:%pHealth%-%cHealth%>
    - if %DamageDealt% > 0 flag %player% <npc.name>TotalDamage:+:%DamageDealt%
    
    # This line flags the npc with their current health, so that it can be used to calculate damage next time this script is triggered.
    - flag npc PreviousHealth:<npc.health||0>
    # removal of this flag allows the script to run again, for further damage.    
    - flag npc DamageScriptActive:!

    # Add the damage amount into the Minecraft scoreboard. (Right hand side of players screen).
    - if <npc.flag[Scoreboard]||null> contains bosshealth { 
      - execute as_server "scoreboard players add <context.damager.name> <npc.name.substring[1,9]>.Damage <def[DamageDealt].as_int>" silent 
      }
    # adjust all players 'bossbar' with the boss's current health
    - foreach <npc.flag[BossPlayerList].as_list||li@> {
      - adjust %value% show_boss_bar:<npc.health.percentage.mul[2].as_int||0>|<npc.name>
      } 
    # The following IF's check the boss's current health. If their health is lower than the specified percentage in the "Stage 
    # One/Two/Three/Four Boss Health Percentage" constant values, it will activate the next fighting stage. It flags (flag npc 
    # BossStage:One etc) the stage it's at because this is used to control the flow of stages and also used during the 
    # "Special Attack" loop tasks further down.
    - if '<npc.health.percentage.as_int||0>' < 1 queue clear
    - define BossStage <npc.flag[BossStage]||null>
    - define BossHealth <npc.health.percentage.as_int||0>
    - define EnabledStages '<npc.flag[Enabled Boss Stages].as_list>'
    - if %EnabledStages% contains One && %BossStage% contains null && %BossHealth% <= '<npc.constant[Stage One Boss Health Percentage]>' {
        - flag npc BossStage:One
        - run "NewMoonBoss Fight" 
        }
    - if %EnabledStages% contains Two && %BossStage% contains One && %BossHealth% <= '<npc.constant[Stage Two Boss Health Percentage]>' {
        - flag npc BossStage:Two
        - run "NewMoonBoss Fight" 
        }
    - if %EnabledStages% contains Three && %BossStage% contains Two && %BossHealth% <= '<npc.constant[Stage Three Boss Health Percentage]>' {
        - flag npc BossStage:Three
        - run "NewMoonBoss Fight" 
        }
    - if %EnabledStages% contains Four && %BossStage% contains Three && %BossHealth% <= '<npc.constant[Stage Four Boss Health Percentage]>' {
        - flag npc BossStage:Four
        - run "NewMoonBoss Fight" 
        }         
 
 #--------------------------Boss 'on push'------------------------------------------------------------------
    on push:
    - if '<npc.location.distance[<npc.constant[Boss Spawn Location]>]>' > 20 {
      - flag npc jsentry.target:!
      - anchor id:BossSpawn walknear r:3
      }
      
 #--------------------------Boss 'on enter proximity'-------------------------------------------------------
    on enter proximity:
    # a flag to help track arrows fired during the bossfight.
    #- if <player.flag[PlayerBossList].as_list||li@> !contains <npc> && <player.name> != <npc.name> flag player PlayerBossList:->:<npc>
    # When a player enters the proximity set in the "Boss Awareness Range" constant value, it'll check to see if they are 
    # already on the list and if not it will add them to the "BossPlayerList" flag. This is used for targetted narrate 
    # messages throughout the fight.
    - if <npc.flag[BossPlayerList].as_list||li@> !contains <player> && <player.name> != <npc.name> flag npc BossPlayerList:->:<player>
    # Add players to the spectator list, which shows up in the battle stats after the boss fight.
    - if <npc.flag[BossSpectatorList].as_list||li@> !contains <player> && <player.name> != <npc.name> flag npc BossSpectatorList:->:<player>
    # add a 'bossbar' with the boss's current health
    - adjust <player> show_boss_bar:<npc.health.percentage.mul[2].as_int||0>|<npc.name> 
    
    # If proximity was set as the "NewMoonBoss Fight Activator" in the constant values at the top, this will
    # start the fight if there isn't already an active fight stage.
    - if '<npc.constant[Bossfight Activator]>' == "proximity" && !<npc.has_flag[BossStage]> && !<npc.has_flag[BossDied]> {
      - flag npc BossStage:One
      - run "NewMoonBoss Fight" 
      } 
    # this line ends the queue for the self heal task, if it has been activated.
    - if <queue.exists[<npc.name>_BossHeal]> queue 'queue:<npc.name>_BossHeal' clear
    # This removes a flag that will be checked after the period of inactivity specified in the "NewMoonBoss Reset Timer", so 
    # that the boss will not be reset. (if the flag is still set at the end of the timed period, the reset goes ahead.)
    - flag npc BossResetTimer:!
    
 #--------------------------Boss 'on exit proximity'--------------------------------------------------------
    on exit proximity:
    - define BossRange '<npc.constant[Boss Awareness Range]>'
    # remove 'bossbar' from exiting player.
    - adjust <player> show_boss_bar:!
    # remove npc.id from player flag
    #- flag player PlayerBossList:<-:<npc>    
    # The wait 10 allows for a buffer where players are on the edge of the proximity moving in and out.
    - wait 10s
    # If the fight has been activated (i.e. it hasn't got a null boss stage), and there are still no players in proximity
    # and self healing has been enabled in the constants, run the "NewMoonBoss Self Heal" task.
    - define NearbyPlayersSize <npc.location.find.players.within[%BossRange%].size||0>
    - if %NearbyPlayersSize% < 1 && <npc.has_flag[BossStage]> && '<npc.constant[Boss Self Healing]>' == "Yes" {
      - run "NewMoonBoss Self Heal" id:<npc.name>_BossHeal 
      }
    # Same as above, except this starts the "NewMoonBoss Reset" task with a delay timer (as set in "NewMoonBoss Reset Timer" constant).
    - if %NearbyPlayersSize% < 1 && <npc.has_flag[BossStage]> && '<npc.constant[Boss Reset Timer]>' >= 1 && !<npc.has_flag[BossResetTimer]> {
      - flag npc BossResetTimer
      - run "NewMoonBoss Reset" id:<npc.name>_ResetTimer 'delay:<npc.constant[Boss Reset Timer]>'
      }
 #==========================================================================================================
"NewMoonBoss Fight":
  type: task
  debug: false
  script:
  # first a check to stop this script running if the boss is already dead.
  - if <npc.has_flag[BossDied]||null> queue clear
  
  # Every time a fight stage kicks off, this is the script it runs. Initially it announces the boss health percentage to the 
  # "BossPlayerList" (so not everyone on the server gets the message, only the participants. 
  - define BossStage <npc.flag[BossStage]||none>
  - define SpecialAttack '<npc.constant[Stage %BossStage% Special Attack]||null>'
  - narrate "<red>Boss Stage %BossStage% - Health <npc.health.percentage.as_int><&pc>" targets:<npc.flag[BossPlayerList].as_list||null>

  # Flags the boss with the current stage special attack, used by the special attack tasks to run (or to stop running if it's 
  # not relevant for that stage anymore).
  - flag npc "CurrentSpecialAttack:%SpecialAttack%"

  # Each stage can also have a different effect play around/near the boss, this is checked here and applied with the "execute 
  # as_server" command. If there is no effect for this stage, it removes it with the "--play none" parameter below.
  - if flame|heart|smoke|ender|potbreak|explosion contains "<npc.constant[Stage %BossStage% Boss Aura]||none>" {
      - execute as_server "npc sel <npc.id>" silent
      - execute as_server "npc effect --play none" silent
      - execute as_server "npc effect --play <npc.constant[Stage %BossStage% Boss Aura]>" silent }
      else {
        - execute as_server "npc sel <npc.id>" silent
        - execute as_server "npc effect --play none" silent }

  # The next section is where the minions are spawned, if enabled, for the relevant boss stage.
  # For the "repeat" command, it runs the number of times based on the number of minions you've set to spawn in the "... 
  # Minion Quantity" constant values  at the top for each stage.
  #
  # It uses a global flag (<bossname>Id) to store the boss's NPC ID which is then put into a for each of the minions - so it 
  # creates a relationship between the boss & minions so they can be despawned when the boss dies, for example.
  #
  # It checks to see where the minions should spawn based on your set spawn location, 'player', 'cuboid' or 'boss'. Then it 
  # picks a random "safe" location for the minion to spawn. This prevents *most* NPC's from spawning inside walls.
  #
  # Then it runs the "NewMoonBoss Spawn Minion" task instantly. This is explained further down when you get to the task.
  #
  # Once the minion has been created, it'll make it a baby if a) you enabled it  b) if the NPC type supports it. It then 
  # applies all the jsentry values you've set at each stage in the constants at the top of the script. 

  - if '<npc.constant[Stage %BossStage% Spawn Minions]>' == "Yes" && <npc.flag[MinionSpawnedStage]||none> != %BossStage% {
    - flag npc MinionSpawnedStage:%BossStage%
    - define MinionSpawn '<npc.constant[Minion %BossStage% Spawn Location]>'
    - if %MinionSpawn% == cuboid define cuboid <npc.flag[cuboid]>
      else if %MinionSpawn% == boss {
        - define location <npc.location.simple>
        - define cuboid <el@val[<l@%location%.add[l@-5,0,-5]>|<l@%location%.add[l@5,1,5]>].as_cuboid> 
      }
    - repeat '<npc.constant[Minion %BossStage% Quantity]>' {
      - if %MinionSpawn% == player {
        - define selplayer <npc.flag[BossPlayerList].as_list.random||null>
        - define location <player[%selplayer%].location.simple>
        - define cuboid <el@val[<l@%location%.add[l@-3,0,-3]>|<l@%location%.add[l@3,1,3]>].as_cuboid> }
      - flag npc SpawnLocation:<%cuboid%.get_spawnable_blocks.random>
      - run "NewMoonBoss Spawn Minion" instantly 
    }
  }
  # Each stage can have a different special attack. This is where that process starts. First it checks what the attack is for 
  # the current fight stage, then flags the Boss with the "ActiveSpecialAttackStage" which is used by the special attack tasks # to run or cancel further down.
  - if "Poison Arrow|Wither Arrow|Weakness Arrow|Slowness Arrow" contains %SpecialAttack% {
    - flag npc ActiveSpecialAttackStage:Arrows
    - run "NewMoonBoss Special Attack - Arrows" 
    }
    else if "Rain Arrows|Lightning Bolt|Lightning Storm|TNT|TNT Drop|Throw|Firestarter" contains %SpecialAttack% {
      - flag npc ActiveSpecialAttackStage:%SpecialAttack%
      - run "NewMoonBoss Special Attack - %SpecialAttack%" 
      }
    else flag npc ActiveSpecialAttackStage:!
 
#===========================================================================================================
"NewMoonBoss Spawn Minion":
    # NB this script is run by the boss; although after the creation of the minion, it gets a bit confused, so I saved/defined the BossID early on.
    type: task
    debug: false
    script:
    # This script defines the boss ID & stage and then uses those to discover: 
    #   1) Which effect to use to spawn the minion 
    #   2) where to spawn the minion
    #   3) the minion's name & type
    # it then selects the minion, and calls the assignment script for minions, that does the rest of the work.
    
    - define BossID <global.flag[NewMoonBossID]>
    - define BossStage <%BossID%.flag[BossStage]>
    # this if statement handles the minion's spawn effect, if configured.
    - if "<%BossID%.constant[Minion %BossStage% Spawn Effect]>" == lightning strike no_damage location:<%BossID%.flag[SpawnLocation]>
      else if "<%BossID%.constant[Minion %BossStage% Spawn Effect]>" == explode explode power:1 location:<%BossID%.flag[SpawnLocation]>
    # The most effective way to create an NPC is to fit as MANY of the possible parameters into the "npc create" command as possible. 
    # This avoids a scenario where the players can witness the NPC's changing or being teleported to where you intended etc.
    - create '<%BossID%.constant[Minion %BossStage% Type]>' '<%BossID%.constant[Minion %BossStage% Name]>' '<%BossID%.flag[SpawnLocation]>' save:Minion
    # select the new minion
    - execute as_server "npc select <entry[Minion].created_npc.id>" silent
    # Assign the "NewMoonBoss Minion Basics" script to each minion.
    - execute as_server "npc assign --set 'NewMoonBoss Minion Actions'" silent
    
#===========================================================================================================
"NewMoonBoss Minion Actions":
  # this script is run by the Minions, on it being assigned to them, by the script above.  Therefore <npc> tags here refer to the Minion.
  type: assignment
  debug: false
  actions:
  # -------------------------Minion 'on assignment'---------------------------------------------------------
    on assignment:
    # first some triggers
    - trigger name:click state:true
    - trigger name:damage state:true
    # then some definitions 
    - define BossID <global.flag[NewMoonBossID]>
    - define BossStage <%BossID%.flag[BossStage]>

    # Add NPC id to a global "AllMinions" list. This is checked by the boss on spawn to clean up any left behind NPC's if 
    # something went wrong or server shutdown midway through a fight.
    - flag global AllMinions:->:<npc>

    # Flag the minion with the boss ID. This allows the minion to updates flags on the boss, e.g. the "BossPlayerList" or to 
    # add itself to the "AllMyMinions" list which is checked during by the Prevent Self Harm script. (now part of 
    # Items_and_world_scripts.)
    - flag npc MinionCreator:%BossID%
    
    # In order to calculate damage correctly during the fight, the minion needs to be flagged with its own initial health.  
    # This is easy to do here as we already have the needed def's set up.
    - flag npc 'MaxHealth:<%BossID%.constant[Minion %BossStage% Health]>'

    # Minion adds itself into the boss's minion list flags.
    - flag %BossID% Stage%BossStage%Minions:->:<npc>
    - flag %BossID% AllMyMinions:->:<npc>
    
    # now we setup the various config options for the minion, as defined in the constants, for the current BossStage.
    #- execute as_server "npc select <npc.id>" silent
    - if '<%BossID%.constant[Minion %BossStage% Type]>' contains player {
      - adjust <npc> 'skin:<%BossID%.constant[Minion %BossStage% Skin]>' }
    - if '<%BossID%.constant[Minion %BossStage% Age]>' == baby {
      - age <npc> baby lock }
    - health state:true
    - vulnerable state:true
    - adjust <npc> 'max_health:<%BossID%.constant[Minion %BossStage% Health]>'
    - adjust <npc> 'health:<%BossID%.constant[Minion %BossStage% Health]>'
    - trait state:true pushable
    - flag npc jsentry.is_jsentry
    - flag npc 'jsentry.attackrate:<%BossID%.constant[Minion %BossStage% Attack Rate]>'
    - flag npc 'jsentry.walkspeed:<%BossID%.constant[Minion %BossStage% Speed]>'
    - flag npc 'jsentry.damage:<%BossID%.constant[Minion %BossStage% Strength]>'
    - flag npc 'jsentry.armour:<%BossID%.constant[Minion %BossStage% Armour].div[100]>'
    - flag npc 'jsentry.range:<%BossID%.constant[Minion %BossStage% Attack Range]>'
    - if '<%BossID%.constant[Minion %BossStage% Weapon]>' != none {
      - equip <npc> 'hand:<%BossID%.constant[Minion %BossStage% Weapon]>' }
    - if '<%BossID%.constant[Minion %BossStage% Guardmode]>' contains bodyguard {
      - flag npc 'jsentry.guard_target:<%BossID%>'
      - flag npc 'jsentry.follow_range:8'
      }
    - flag npc 'jsentry.targets:player'

  #--------------------------Minion 'on death'--------------------------------------------------------------
    on death:
    # This section contains commands to be run whenever a Minion dies, for any reason.
    
    # Remove the minion from the "AllMinions" global flag (used to clean up if minions left behind for whatever reason).
    - flag global AllMinions:<-:<npc>
    # Remove the minion from the boss's minion list.
    - flag <npc.flag[MinionCreator]> AllMyMinions:<-:<npc>
    
  #--------------------------Minion 'on death by player'----------------------------------------------------
    on death by player:
    # This section contains commands to be run, in addition to the 'on death' commands, when a Minion is killed by a player.
    - define Boss <npc.flag[MinionCreator]>
    # This adds 1 to a player flag keeping count of minions killed.
    - flag player <%Boss%.name>MinsKilled:++
    # If the scoreboard is set to record minions killed count, add one to the player score.
    - if <%Boss%.flag[Scoreboard]||null> == minionkills execute as_server "scoreboard players add <player.name> <%Boss%.name.substring[1,5]>.MinionKills 1" silent
  #--------------------------Minion 'on click'--------------------------------------------------------------
    on click:
    - run "Health Status Bar"
    
  #--------------------------Minion 'on damaged'------------------------------------------------------------
    on damaged:
    # This script is very similar to the Boss's 'on damage' script, so comments will be limited.
    - wait 1t
    - if <context.damager> matches player {
      - define player <context.damager> 
      }
      else determine cancelled
    - if <npc.has_flag[DamageScriptActive]> determine cancelled else flag npc DamageScriptActive duration:1s
    - define Boss <npc.flag[MinionCreator]>
    - if <def[Boss].is_spawned> {
      #- if <player.flag[PlayerBossList].as_list||li@> !contains <%Boss%> && <player.name> != <npc.name> flag player PlayerBossList:->:<%Boss%>
      - if <%Boss%.flag[BossPlayerList].as_list||li@> !contains %player% && %player% != %Boss% flag <%Boss%> BossPlayerList:->:%player% 
      - if <%Boss%.flag[BossHitList].as_list||li@> !contains %player% && %player% != %Boss% flag <%Boss%> BossHitList:->:%player% 
      
      - define MaxHealth <npc.flag[MaxHealth]>
      - define pHealth <npc.flag[PreviousHealth]||%MaxHealth%>
      - define cHealth <npc.health||0>
      - define DamageDealt <m:%pHealth%-%cHealth%>
      - if %DamageDealt% > 0 flag %player% <%Boss%.name>MinsDamage:+:%DamageDealt%
      - flag %player% <%Boss%.name>MinsHit:++
      - if <%Boss%.flag[Scoreboard]> == 'minionhealth' && %DamageDealt% > 0 { 
        - execute as_server "scoreboard players add <context.damager.name> <%Boss%.name.substring[1,6]>.MinionDmg %DamageDealt% silent
        }
      }    
    - flag npc PreviousHealth:<npc.health> 
    - flag npc DamageScriptActive:! 
 #==========================================================================================================
"NewMoonBoss Self Heal":

# If you typed "Yes" in the  "Boss Self Healing" constant value,
# a exit proximity trigger will check to see if there are any players left in
# proximity.. if not, it will run this task below which will heal the NPC 1
# health every 5 seconds.
#
# If players enter proximity, this task is cancelled and the boss will stop healing.
#
    type: task
    debug: false
    script:
    - define BossRange '<npc.constant[Boss Awareness Range]>'
    - if <npc.health> < <npc.health.max> && '<npc.location.find.players.within[%BossRange%].size||0>' < 1 && !<npc.has_flag[HealActive]> {
      - flag npc HealActive
      - adjust <npc> 'health:<npc.health.add[1]>'
      - wait 5
      - flag npc HealActive:!
      - run "NewMoonBoss Self Heal" id:<npc.name>_BossHeal }


  #====================================================================================================================
"NewMoonBoss Reset":

# This script is used to RESET the boss back to start (health back to 100%, all spawned minions removed, all player damage/counter flags reset, 
# all boss targets, effects and flags cleared and Minecraft scoreboard removed.
#
# This task will only run if the "Boss Reset Timer" constant value is set to 1 or higher and when the last player leaves the boss proximity. When a
# player enters proximity, the "BossResetTimer" flag timer is NULL'ed, so when the task runs it fails on the first IF and boss is not reset.

  type: task
  debug: false
  script:
  - ^if <npc.has_flag[BossResetTimer]> {
    - define SpecialAttackQueue '<npc.name>SpecialAttack'
    - if <queue.exists[%SpecialAttackQueue%]> queue 'queue:%SpecialAttackQueue%' clear
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
      - if <npc.has_flag[Stage%value%Minions]> {
        - foreach <npc.flag[Stage%value%Minions].as_list> {
          - if <npc> != %value% remove %value% 
        }
      }
    }
    - foreach '<npc.flag[Enabled Boss Stages].as_list>' {
      - flag npc Stage%value%Minions:! }
     
    - narrate "<red>BOSS EVENT<&co> <white><npc.name><red> has been reset." targets:<npc.flag[BossPlayerList].as_list>
    - if <npc.flag[BossHitList].size> >= 1 {
      - foreach <npc.flag[BossHitList].as_list> {
        - flag %value% <npc.name>TotalDamage:!
        - flag %value% <npc.name>HitCount:!
        - flag %value% <npc.name>MinsKilled:!
        - flag %value% <npc.name>MinsHit:!
        - flag %value% <npc.name>MinsDamage:! }
    }
    - execute as_server "npc sel <npc.id>" silent
    - execute as_server "npc effect --play none" silent
    - execute as_server "sentry target clear" silent
    - if <npc.has_flag[Scoreboard]> {
      - if <npc.flag[Scoreboard]> == bosshealth execute as_server "scoreboard objectives remove <npc.name.substring[1,9]>.Damage" silent
        else if <npc.flag[Scoreboard]> == minionkills execute as_server "scoreboard objectives remove <npc.name.substring[1,5]>.MinionKills" silent
        else if <npc.flag[Scoreboard]> == minionhealth execute as_server "scoreboard objectives remove <npc.name.substring[1,6]>.MinionDmg" silent
    }
    - teleport <npc> "location:<npc.constant[Boss Spawn Location]>"
    - adjust <npc> 'health:<npc.constant[Boss Health]>'
    - flag npc PreviousHealth:!
    - flag npc BossHitList:!
    - flag npc BossSpectatorList:!
    - flag npc BossStage:!
    - flag npc BossPlayerList:!
    - flag npc ActiveSpecialAttackStage:!
    - flag npc MinionSpawnedStage:!
    - flag npc Scoreboard:!
    - flag npc AllMyMinions:!
    - flag npc BossResetTimer:!
    - flag npc HealActive:!
  }

"NewMoonBoss Special Attack - Arrows":
#=====================================================================================
  # The following sections contain several scripts that are used by the "special attacks" that are enabled in the constant values "Stage One/Two
  # /Three/Four Special Attack" at the top of the script.
  #
  # The following flags and definitions are used in each of the special attack scripts:-
  # * PreventDoubleAttack: This flag is to prevent the task from running when it's already active. If the flag wasn't there it would've happened when
  #   another player entered the boss's proximity.
  # * Active Special Attack Stage: Checks if the script is still relevant for the particular boss stage we're in.
  # * %BossRange%: hold the value specified in constant "Boss Awareness Range" from the Boss
  # * %NearbyPlayers%: the number of players in the %BossRange%, used to prevents the task from running if no one is there.
  # * %BossStage%: This is used to check if the boss is in an attack stage, e.g. the fight isn't over (BossStage will be null if it is).
  #
  # Initially, it check the first two on the list above, and if they are set 'correctly' it waits 5 seconds and then runs the task again.  This 
  # creates a basic loop that holds off launching the attack until PreventDoubleAttack: clears.  Once this happens, it moves to the second stage
  # of the script where it checks whether the ActiveSpecialAttackStage is null OR "Arrows" is still the relevant special attack.  This is checking
  # that none of the other special attack scripts have set themselves as being active, while it was in the loop condition. 
  #
  # After checking %NearbyPlayers% & %BossStage%, it flags the NPC with its current active special attack and puts the "PreventDoubleAttack" 
  # protection flag in place, with an expiry duration of the intended attack delay.  It then finds a random player within %BossRange% and uses 
  # the "shoot" command to shoot an arrow at them.  Each arrow fired here triggers the script "NewMoonBoss Special Arrow Handler" which applies the 
  # Poison|Wither|Slowness|etc effects.
  #
  # The script then waits for the duration specified in the "Stage One/Two/Three/Four Special Attack Delay", does a quick check to see this attack
  # is still relevant/current, and re-launches itself.

#====================================================================================================================
  type: task
  debug: false
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "Arrows" {
    - ^wait 5s
    - ^if <npc.flag[ActiveSpecialAttackStage]||null> == "Arrows" run "NewMoonBoss Special Attack - Arrows" id:<npc.name>SpecialAttack 
  }
  # lines above form a loop that runs for the duration of flag[PreventDoubleAttack], lines below will run when the flag clears.
    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "Arrows" {
      - ^define BossStage <npc.flag[BossStage]||null>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc ActiveSpecialAttackStage:Arrows
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^define arrowplayer <%NearbyPlayers%.random>
        - ^narrate "<yellow><npc.name><red> shoots a <npc.flag[CurrentSpecialAttack]> towards <yellow><%arrowplayer%.name><red>..." targets:<npc.flag[BossPlayerList].as_list>
        - ^shoot arrow origin:<npc> destination:<%arrowplayer%.location> Height:0.1 'script:NewMoonBoss Special Arrow Handler'
        - ^wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - ^if <npc.flag[ActiveSpecialAttackStage]||null> == "Arrows" run "NewMoonBoss Special Attack - Arrows" id:<npc.name>SpecialAttack
      }
    }
  # whole script ends when the special attack flag on the Boss is changed.
    
"NewMoonBoss Special Attack - Rain Arrows":
#-------------------------------------------------------------------------------
# This script uses a "Cuboid" which are the two values you specified in the constant values "Cuboid Spawn Area Poss 1" and "Cuboid Spawn Area 
# Poss 2" at the top of the script.
#
# The cuboid should be a square INSIDE your fighting room. If the cuboid is larger than your room, you'll have arrows spawning outside of the room.
# 
# If you want to see where your cuboid outline is, type the following command in Minecraft, with the NPC selected, and it'll create fake glass 
# blocks that will  disappear in 10 seconds:
#
#     /ex showfake glass <<npc.flag[cuboid]>.get_outline> duration:10s
#-------------------------------------------------------------------------------
  type: task
  debug: true
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null>> == "Rain Arrows" {
    - ^wait 5s
    - ^if <npc.flag[ActiveSpecialAttackStage]||null> == "Rain Arrows" run "NewMoonBoss Special Attack - Rain Arrows" id:<npc.name>SpecialAttack 
  }
    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "Rain Arrows" {
      - ^define BossStage <npc.flag[BossStage]||null>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc "ActiveSpecialAttackStage:Rain Arrows"
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^narrate "<yellow><npc.name><red> causes it to Rain Arrows..." targets:<npc.flag[BossPlayerList].as_list>
        - ^define cuboid <npc.flag[cuboid]>
        - ^define roof <%cuboid%.max.y.add[-1]>
        - ^define minX <%cuboid%.min.x.add[+1].as_int>
        - ^define maxX <%cuboid%.max.x.add[-1].as_int>
        - ^define minZ <%cuboid%.min.z.add[+1].as_int>
        - ^define maxZ <%cuboid%.max.z.add[-1].as_int>
        # The attack will now repeat the number of times specified in the constants. (initial value here 200)
        - ^repeat '<npc.constant[Stage %BossStage% Special Attack Quantity]||200>' {  
          - ^define Xrange <util.random.int[%minX%].to[%maxX%]>
          - ^define Zrange <util.random.int[%minZ%].to[%maxZ%]>
          - ^spawn i@arrow 'origin:%Xrange%,%roof%,%Zrange%,<npc.constant[World Name]>' }
        - ^wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - ^if <npc.flag[ActiveSpecialAttackStage]||null>> == "Rain Arrows" run "NewMoonBoss Special Attack - Rain Arrows" id:<npc.name>SpecialAttack 
      }
    }
  #------------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - Lightning Bolt":
  type: task
  debug: true
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Bolt" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Bolt" run "NewMoonBoss Special Attack - Lightning Bolt" id:<npc.name>SpecialAttack }

    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Bolt" {
      - ^define BossStage <npc.flag[BossStage]||null>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc "ActiveSpecialAttackStage:Lightning Bolt"
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^define lightningplayer <%NearbyPlayers%.random>
        - ^narrate "<yellow><npc.name><red> calls a Lightning Bolt to hit <yellow><%lightningplayer%.name><red>..." targets:<npc.flag[BossPlayerList].as_list>
        - ^strike destination:<%lightningplayer%.location>
        - wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - if <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Bolt" run "NewMoonBoss Special Attack - Lightning Bolt" id:<npc.name>SpecialAttack
      }
    }
  #------------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - Lightning Storm":
  type: task
  debug: true
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Storm" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Storm" run "NewMoonBoss Special Attack - Lightning Storm" id:<npc.name>SpecialAttack }

    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Storm" {
      - ^define BossStage <npc.flag[BossStage]>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc "ActiveSpecialAttackStage:Lightning Storm"
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^narrate "<yellow><npc.name><red> calls a Lightning Storm!" targets:<npc.flag[BossPlayerList].as_list>
        - ^define cuboid <npc.flag[cuboid]>
        - ^define floor <%cuboid%.min.y>
        - ^define minX <%cuboid%.min.x.add[+1].as_int>
        - ^define maxX <%cuboid%.max.x.add[-1].as_int>
        - ^define minZ <%cuboid%.min.z.add[+1].as_int>
        - ^define maxZ <%cuboid%.max.z.add[-1].as_int>
        # The attack will now repeat the number of times specified in the constants. (initial value here 20)
        - repeat '<npc.constant[Stage %BossStage% Special Attack Quantity]||20>' { 
          - ^define Xrange <util.random.int[%minX%].to[%maxX%]>
          - ^define Zrange <util.random.int[%minZ%].to[%maxZ%]>
          - strike 'destination:%Xrange%,%floor%,%Zrange%,<npc.constant[World Name]>' }
        - wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - if <npc.flag[ActiveSpecialAttackStage]||null> == "Lightning Storm" run "NewMoonBoss Special Attack - Lightning Storm" 
      }
    }
  #-----------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - TNT":
  type: task
  debug: true
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "TNT" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == "TNT" run "NewMoonBoss Special Attack - TNT" id:<npc.name>SpecialAttack }

    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "TNT" {
      - ^define BossStage <npc.flag[BossStage]>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - flag npc ActiveSpecialAttackStage:TNT
        - flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - define targetplayer "<%NearbyPlayers%.random>"
        - narrate "<yellow><npc.name><red> lobs TNT at <yellow><%targetplayer%.name><red>..." targets:<npc.flag[BossPlayerList].as_list>
        - playsound location:<%targetplayer%.location> sound:fuse
        - shoot e@primed_tnt origin:<npc> destination:<%targetplayer%.location.simple> Height:0.5
        - wait <npc.constant[Stage %BossStage% Special Attack Delay]>'
        - if <npc.flag[ActiveSpecialAttackStage]||null> == "TNT" run "NewMoonBoss Special Attack - TNT" id:<npc.name>SpecialAttack }
    }
  #----------------------------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - TNT Drop":
  type: task
  debug: false
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "TNT Drop" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == "TNT Drop" run "NewMoonBoss Special Attack - TNT Drop" id:<npc.name>SpecialAttack }

    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "TNT Drop" {
      - ^define BossStage <npc.flag[BossStage]>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc "ActiveSpecialAttackStage:TNT Drop"
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^narrate "<yellow><npc.name><red> drops primed TNT.. TAKE COVER!" targets:<npc.flag[BossPlayerList].as_list>
        - ^define cuboid <npc.flag[cuboid]>
        - ^define roof <%cuboid%.max.y.add[-1]>
        - ^define minX <%cuboid%.min.x.add[+1].as_int>
        - ^define maxX <%cuboid%.max.x.add[-1].as_int>
        - ^define minZ <%cuboid%.min.z.add[+1].as_int>
        - ^define maxZ <%cuboid%.max.z.add[-1].as_int>
        # The attack will now repeat the number of times specified in the constants. (initial value here 25)
        - ^repeat '<npc.constant[Stage %BossStage% Special Attack Quantity]||25>' {
          - ^define Xrange <util.random.int[%minX%].to[%maxX%]>
          - ^define Zrange <util.random.int[%minZ%].to[%maxZ%]>
          - ^spawn e@primed_tnt 'origin:%Xrange%,%roof%,%Zrange%,<npc.constant[World Name]>' }
      - wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
      - if && <npc.flag[ActiveSpecialAttackStage]||null> == "TNT Drop" run "NewMoonBoss Special Attack - TNT Drop" id:<npc.name>SpecialAttack }
    }

  #-----------------------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - Throw":
  type: task
  debug: true
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "Throw" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == "Throw" run "NewMoonBoss Special Attack - Throw" id:<npc.name>SpecialAttack }
    
    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == "Throw" {
      - ^define BossStage <npc.flag[BossStage]>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc PreventDoubleAttack "duration:<npc.constant[Stage %BossStage% Special Attack Delay]>"
        - ^flag npc ActiveSpecialAttackStage:Throw
        # The next line defines how many players will be thrown, from the value entered in the constants (initial value here 3)
        - ^define NumberOfPlayers '<npc.constant[Stage %BossStage% Special Attack Quantity]||1>'
        - ^flag npc "ThrowList:|:<%NearbyPlayers%.random[%NumberOfPlayers%]>"
        - ^narrate "<yellow><npc.name><red> throws <npc.flag[Throwlist].formatted>..." targets:<npc.flag[BossPlayerList].as_list>
        - ^define cuboid <npc.flag[cuboid]>
        - ^define roof <%cuboid%.max.y.add[-1]>
        - ^define minX <%cuboid%.min.x.as_int>
        - ^define maxX <%cuboid%.max.x.as_int>
        - ^define minZ <%cuboid%.min.z.as_int>
        - ^define maxZ <%cuboid%.max.z.as_int>
        - ^foreach <npc.flag[Throwlist].as_list> {
          - ^flag npc ThrowList:<-:%value%
          - ^define Xrange <util.random.int[%minX%].to[%maxX%]>
          - ^define Zrange <util.random.int[%minZ%].to[%maxZ%]>
          - ^shoot %value% origin:<%value%.location.simple> 'destination:%Xrange%,%roof%,%Zrange%,<npc.constant[World Name]>' height:1.8 gravity:0.32 }
        - ^flag npc ThrowList:!
        - wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - if <npc.flag[ActiveSpecialAttackStage]||null> == "Throw" run "NewMoonBoss Special Attack - Throw" id:<npc.name>SpecialAttack 
      }
    }
  #-------------------------------------------------------------------------------------------------------------------------------
"NewMoonBoss Special Attack - Firestarter":
  type: task
  debug: false
  script:
  - ^if <npc.has_flag[PreventDoubleAttack]> && <npc.flag[ActiveSpecialAttackStage]||null> == "Firestarter" {
    - wait 5s
    - if <npc.flag[ActiveSpecialAttackStage]||null> == Firestarter run "NewMoonBoss Special Attack - Firestarter" 'id:<npc.name>SpecialAttack' }

    else if !<npc.has_flag[ActiveSpecialAttackStage]> || <npc.flag[ActiveSpecialAttackStage]||null> == Firestarter {
      - ^define BossStage <npc.flag[BossStage]>
      - ^define BossRange '<npc.constant[Boss Awareness Range]>'
      - ^define NearbyPlayers '<npc.location.find.players.within[%BossRange%].as_list||null>'
      - ^if <%NearbyPlayers%.size> >= 1 && %BossStage% != null {
        - ^flag npc PreventDoubleAttack 'duration:<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - ^flag npc ActiveSpecialAttackStage:Firestarter
        - ^narrate "<yellow><npc.name><red> sets the place on fire..." targets:<npc.flag[BossPlayerList].as_list>
        - ^define cuboid <npc.flag[cuboid]>
        # ^The attack will now light the number of fires specified in the constants. (initial value here 20)
        - ^repeat '<npc.constant[Stage %BossStage% Special Attack Quantity]||20>' {
          - ^modifyblock location:<%cuboid%.get_spawnable_blocks.random> fire }
        - wait '<npc.constant[Stage %BossStage% Special Attack Delay]>'
        - if <npc.flag[ActiveSpecialAttackStage]||null> == "Firestarter" run "NewMoonBoss Special Attack - Firestarter" 'id:<npc.name>SpecialAttack' 
      }
    }
    
"NewMoonBoss Special Arrow Handler":
#-------------------------------------------------------------------------------#
# This script handles the different types of arrows the boss can shoot as part of it's special attacks. 
# It determines which spell to "cast" based on what the current active special attack is.
#
# It'll also narrate a random message to the boss player list about who got hit and what the effect is.
#-------------------------------------------------------------------------------#
  type: task
  debug: false
  script:
  - if %hit_entities% == li@ remove %shot_entities%
  - define hearers <npc.flag[BossPlayerList].as_list||li@>
  - if <npc.flag[CurrentSpecialAttack]> == "Poison Arrow" {
    - cast poison duration:3 power:1 %hit_entities%
    - random {
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to bleed from the ears." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing agonising pain and loss of health." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing itchy and burning skin blisters." targets:%hearers% }
    - queue clear }
  - if <npc.flag[CurrentSpecialAttack]> == "Wither Arrow" {
    - cast wither duration:3 power:1 %hit_entities%
    - random {
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing their skin to peel off." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing their limbs to decay." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing their skin to ooze." targets:%hearers% }
    - queue clear }
  - if <npc.flag[CurrentSpecialAttack]> == "Weakness Arrow" {
    - cast weakness duration:3 power:1 %hit_entities%
    - random {
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to become weak and tired." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to deal less damage." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to hit like a little girl." targets:%hearers% }
    - queue clear }
  - if <npc.flag[CurrentSpecialAttack]> == "Slowness Arrow" {
    - cast slow duration:10 power:3 %hit_entities%
    - random {
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to become slow and lazy." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to walk at a snails pace." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, making them slower than a speeding microorganism." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, making them slower than a 1 legged dog on tranquilizers." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, making them slower than a geriatric slug on a salted snowed-in street." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, making them slower than a snail traveling through peanut butter." targets:%hearers%
      - narrate "<red>...and hits <yellow><%hit_entities%.name||noone><red>, causing them to be slower than Java." targets:%hearers% }
    - queue clear }
      
"NewMoonBoss Drop the Loot":
#-------------------------------------------------------------------------------#
# Loot can be delivered in 4 different ways. 
# 1) In the player inventory, using the "give" command.
# 2) Drop around where the boss died.
# 3) Inside a chest that spawns in close proximity to where the boss died.
# 4) in a separate chest for each player, that is protected for them only, and marked with a sign.
#
# How does it decide the loot? By using a procedure script of course! This
# type of script returns us a single value. Further explained in the next
# section.
#-------------------------------------------------------------------------------#
    type: task
    debug: true
    script:
    - if '<npc.constant[Loot Distribution]>' == player {
      - foreach <npc.flag[BossHitList].as_list> {
        - repeat '<npc.constant[Loot Quantity]>' {
          - give to:<%value%.inventory> 'i@<proc:Bossfight Determine Loot>' }
      }
      - queue clear }
      
    - if '<npc.constant[Loot Distribution]>' == boss {
      - foreach <npc.flag[BossHitList].as_list> {
        - repeat '<npc.constant[Loot Quantity]>' {
          - drop 'i@<proc:Bossfight Determine Loot>' location:<npc.flag[DeathLocation]> }
        }
      - queue clear }
      
    - if '<npc.constant[Loot Distribution]>' == chest {
      - define location <npc.location.simple>
      - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,1,2]>].as_cuboid>
      - define chestlocation <%cuboid%.get_spawnable_blocks.random.block.as_location.block>
      - flag npc LootChestLocationList:->:%chestlocation% 
      - define signlocation <%chestlocation%.add[l@0,1,0]>
      - modifyblock location:%chestlocation% chest
      - sign %signlocation% "Loot Chest|for|all warriors|to share"
      - foreach <npc.flag[BossHitList].as_list> {
        - repeat '<npc.constant[Loot Quantity]>' {
          - give "i@<proc:Bossfight Determine Loot>" to:<%chestlocation%.inventory> 
          }
        }
      }  
      else if '<npc.constant[Loot Distribution]>' == playerchest {
        - flag npc PlayersGettingChest:<npc.flag[BossHitList]>
        - foreach <npc.flag[BossHitList].as_list> {
          - define location <%value%.location.simple>
          - define cuboid <el@val[<l@%location%.add[l@-2,0,-2]>|<l@%location%.add[l@2,1,2]>].as_cuboid>
          - define chestlocation <%cuboid%.get_spawnable_blocks.random.as_location.block>
          - flag %value% LootChestLocation:%chestlocation%
          - flag npc LootChestLocationList:->:%chestlocation%
          - flag global LootChestList:->:%chestlocation%
          - modifyblock location:%chestlocation% chest
          - sign <%chestlocation%.add[l@0,1,0]> "Loot Chest|for|<%value%.name.display.replace[~]>"
          - repeat '<npc.constant[Loot Quantity]>' {
            - give 'i@<proc:Bossfight Determine Loot>' to:<%chestlocation%.inventory> 
            }
          }
        }
    - if <npc.flag[LootChestLocationList].size||0> >= 1 && '<npc.constant[Loot Chest Expiry]>' >= 1 {
      - run "NewMoonBoss Loot Chest Expiry" 'delay:<npc.constant[Loot Chest Expiry]>'
      }
"NewMoonBoss Loot Chest Expiry":
#-------------------------------------------------------------------------------#
# This task will run with a delay specified in the "Loot Chest Expiry" constant
# value at the top of the script.
#
# It simply removes the chests and drops the items on the floor.
#-------------------------------------------------------------------------------#
    type: task
    debug: false
    script:
    - ^foreach <npc.flag[LootChestLocationList].as_list||li@> {
      - if <location[%value%].block.material||null> == 'm@chest,3' {
        - flag global LootChestList:<-:%value%
        - modifyblock <%value%.add[l@0,1,0]> air 
        - modifyblock %value% air 
      }
    }
    - ^foreach <npc.flag[PlayersGettingChest].as_list||li@> {
      - flag %value% LootChestLocation:! }
    - ^flag npc PlayersGettingChest:!
    - ^flag npc LootChestLocationList:!

# <snip> 
# Loot items and associated scripts are now in a separate .yml file.
